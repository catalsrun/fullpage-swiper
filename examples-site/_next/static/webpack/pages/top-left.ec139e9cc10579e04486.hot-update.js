webpackHotUpdate_N_E("pages/top-left",{

/***/ "../src/index.js":
/*!***********************!*\
  !*** ../src/index.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FullpageSwiper; });\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hammerjs */ \"../node_modules/hammerjs/hammer.js\");\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ \"../node_modules/gsap/index.js\");\n\n\n\nclass FullpageSwiper {\n  static getViewport() {\n    return {\n      // webview issue - undefined : window.innerWidth, window.innerHeight\n      clientWidth: window.innerWidth || document.documentElement.clientWidth,\n      clientHeight: window.innerHeight || document.documentElement.clientHeight\n    };\n  }\n  static getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  constructor(selector, options = {}) {\n    this.containerRef = document.querySelector(selector);\n    this.containerType = this.containerRef.getAttribute('data-stack-type');\n    if (!(this.containerRef && this.containerType)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'fullpage-swiper initialization error, check selector',\n        selector\n      );\n      return;\n    }\n    if (!hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a || !gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '\"Hammer\" and \"gsap\" peerDependencies are required'\n      );\n      return;\n    }\n    this.dep = { Hammer: (hammerjs__WEBPACK_IMPORTED_MODULE_0___default()), gsap: gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"] };\n    this.containerAxis =\n      this.containerType === 'top' || this.containerType === 'y'\n        ? 'vertical'\n        : 'horizontal';\n\n    this.options = Object.assign({ debug: false }, options);\n\n    this.parents = [];\n    this.stacks = [];\n    this.hammers = [];\n\n    this.currentIdx = 0;\n    this.eventAxis = '';\n    this.eventDirection = '';\n    this.dragging = false;\n    this.draggingRef = null;\n\n    this.viewport = FullpageSwiper.getViewport();\n\n    this.setParents();\n    this.setStacks();\n    this.setCommonLayout();\n    this.setLayout();\n\n    this.resizeCallback = this._resizeCallback.bind(this);\n    this._addEvents();\n    this.options.debug && this.debug();\n  }\n  clear() {\n    window.removeEventListener('resize', this.resizeCallback);\n  }\n  _blockEvent(eventAxis) {\n    // 최초 이벤트 요청일 경우 블록 X\n    if (this.eventAxis === '') {\n      this.eventAxis = eventAxis;\n      return false;\n    }\n    // 1.드래깅중이 아닐 경우 이벤트 블록\n    // 2. 진행중인 드래깅이 존재하는 경우, 요청 이벤트 타입이 동일하지 않으면 블록\n    if (!this.isDragging || this.eventAxis !== eventAxis) {\n      // console.log('blocked event', eventType);\n      return true;\n    }\n\n    // 동일한 axis의 드래깅중인 경우 업데이트\n    this.eventAxis = eventAxis;\n  }\n  _resetDrag() {\n    this.dragging = false;\n    this.eventAxis = '';\n    this.eventDirection = '';\n    this.draggingRef = null;\n    this.stackMoveFromTo = {};\n  }\n  _getDraggingInfo(eventTarget) {\n    if (eventTarget) {\n      // obj { from, to, draggable }\n      let obj = eventTarget.canMoveToSibling[this.eventDirection];\n      if (!obj) {\n        obj = eventTarget.canMoveToParent[this.eventDirection];\n      }\n      return obj; \n    }\n    return {};\n  }\n  _panstart(e) {\n    this.isDragging = true;\n    this.eventTarget = this.stacks.find(\n      stack => stack.node === e.currentTarget\n    );\n    if (!this.eventTarget) {\n      this.isDragging = false;\n      return;\n    }\n    this.options.dragStart(this);\n  }\n  _panleft(e) {\n    const eventAxis = 'horizontal';\n    if (this._blockEvent(eventAxis)) return;\n    this.isDifferentEvent = this.eventDirection && this.eventDirection !== 'left';\n\n    this.eventDirection = 'left';\n    // console.log('START:', eventType.direction);\n    \n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _panright(e) {\n    const eventAxis = 'horizontal';\n    if (this._blockEvent(eventAxis)) return;\n    this.isDifferentEvent = this.eventDirection && this.eventDirection !== 'right';\n\n    this.eventDirection = 'right';\n    // console.log('START:', eventType.direction);\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _pandown(e) {\n    const eventAxis = 'vertical';\n    if (this._blockEvent(eventAxis)) return;\n    this.isDifferentEvent = this.eventDirection && this.eventDirection !== 'down';\n\n    this.eventDirection = 'down';\n    // console.log('START:', eventType.direction, this.draggingRef);\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  \n  _panup(e) {\n    const eventAxis = 'vertical';\n    if (this._blockEvent(eventAxis)) return;\n    this.isDifferentEvent = this.eventDirection && this.eventDirection !== 'up';\n    this.eventDirection = 'up';\n    // console.log('from to', data.from, data.to);\n\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _endCallback() {\n    const { stackMoveFromTo } = this;\n    if (stackMoveFromTo.from !== stackMoveFromTo.to) {\n      if (stackMoveFromTo.toParent) {\n        stackMoveFromTo.toParent.lastSeenIndex = stackMoveFromTo.to;\n      }\n    }\n    this.currentIdx = stackMoveFromTo.to;\n    this.options.dragEnd(this);\n    this._resetDrag();\n  }\n  _panend() {\n    if (this.draggingRef) {\n      // gsap 콜백내에서 this.draggingRef 의 값이 null 이 될 가능성이 존재하므로\n      // 드래깅되는 객체의 주소지를 변수로 저장해서 사용\n      const draggingRef = this.draggingRef;\n      const direction = this.eventDirection;\n      const { type } = draggingRef;\n      const { clientHeight, clientWidth } = this.viewport;\n      const t = gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].timeline();\n\n      if (type === 'top') {\n        if (direction === 'up') {\n          if (draggingRef.positions.top !== 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { top: -clientHeight }).add(() => {\n            draggingRef.positions.top = -clientHeight;\n            draggingRef.positions.topResize = -1;\n            this._endCallback();\n          });\n        }\n        if (direction === 'down') {\n          if (draggingRef.positions.top === 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { top: 0 }).add(() => {\n            draggingRef.positions.top = 0;\n            delete draggingRef.positions.topResize;\n            this._endCallback();\n          });\n        }\n      }\n      if (type === 'left') {\n        if (direction === 'left') {\n          if (draggingRef.positions.left !== 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n\n          t.to(draggingRef.node, { left: -clientWidth }).add(() => {\n            draggingRef.positions.left = -clientWidth;\n            draggingRef.positions.leftResize = -1;\n            this._endCallback();\n          });\n        }\n        if (direction === 'right') {\n          if (draggingRef.positions.left === 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { left: 0 }).add(() => {\n            draggingRef.positions.left = 0;\n            delete draggingRef.positions.leftResize;\n            this._endCallback();\n          });\n        }\n      }\n\n      if (type === 'y') {\n        const gap = draggingRef.positions.y - this.snapshotPositions.y;\n        const y = draggingRef.positions.y;\n        if (direction === 'up') {\n          const canNext = this.snapshotPositions.y < y;\n          let move = y;\n          if (canNext) {\n            move = y - clientHeight;\n            const max = -clientHeight * (draggingRef.children.length - 1);\n            if (move < max) move = max;\n          }\n\n          if (gap < 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n\n          t.to(draggingRef.node, { y: move }).add(() => {\n            draggingRef.positions.y = move;\n            if (move !== 0) {\n              draggingRef.positions.yResize = move/clientHeight;\n            } else {\n              delete draggingRef.positions.yResize;\n            }\n            this._endCallback();\n          });\n        }\n        if (direction === 'down') {\n          const canNext = this.snapshotPositions.y > y;\n          let move = y;\n          if (canNext) {\n            move = y + clientHeight;\n            if (move >= 0) move = 0;\n          }\n          if (gap > 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { y: move }).add(() => {\n            draggingRef.positions.y = move;\n            if (move !== 0) {\n              draggingRef.positions.yResize = move/clientHeight;\n            } else {\n              delete draggingRef.positions.yResize;\n            }\n            this._endCallback();\n          });\n        }\n      }\n\n      if (type === 'x') {\n        const x = draggingRef.positions.x;\n        if (direction === 'left') {\n          const canNext = this.snapshotPositions.x < x;\n\n          let move = x;\n          if (canNext) {\n            move = x - clientWidth;\n            const max = -clientWidth * (draggingRef.children.length - 1);\n            if (move < max) move = max;\n          } else {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { x: move }).add(() => {\n            draggingRef.positions.x = move;\n            if (move !== 0) {\n              draggingRef.positions.xResize = move/clientWidth;\n            } else {\n              delete draggingRef.positions.xResize;\n            }\n            this._endCallback();\n          });\n        }\n        if (direction === 'right') {\n          const canNext = this.snapshotPositions.x > x;\n          let move = x;\n          if (canNext) {\n            move = x + clientWidth;\n            if (move >= 0) move = 0;\n          } else {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { x: move }).add(() => {\n            draggingRef.positions.x = move;\n            if (move !== 0) {\n              draggingRef.positions.xResize = move/clientWidth;\n            } else {\n              delete draggingRef.positions.xResize;\n            }\n            this._endCallback();\n          });\n        }\n      }\n    } else {\n      this._resetDrag();\n    }\n  }\n  // todo\n  // this.distance 값에 따라 드래그 가동범위 셋팅 가능하도록\n  // Math.abs(e.deltaY), Math.abs(e.deltaX)\n  _dragging(e) {\n    const target = this.draggingRef;\n    const { type } = target;\n    const { clientHeight, clientWidth } = this.viewport;\n\n    this.snapshotPositions = {\n      top: 0,\n      left: 0,\n      x: 0,\n      y: 0\n    };\n    const positions = this.snapshotPositions;\n    let posY, posX;\n    if (type === 'y') {\n      posY = e.deltaY + target.positions.y;\n\n      if (posY >= 0) {\n        target.positions.y = 0;\n        target.node.style.transform = 'translate3d(0px, 0px, 0px)';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      } else {\n        const max = -clientHeight * (target.children.length - 1);\n        if (posY <= max) {\n          target.positions.y = max;\n          target.node.style.transform = `translate3d(0px, ${max}px, 0px)`;\n          // change dragging target\n          this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n          this.draggingRef = this.draggingInfo.draggable;\n          return;\n        }\n      }\n\n      positions.y = posY;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(target.node, { y: posY });\n    }\n    if (type === 'x') {\n      posX = e.deltaX + target.positions.x;\n      if (posX >= 0) {\n        target.positions.x = 0;\n        target.node.style.transform = 'translate3d(0px, 0px, 0px)';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      const max = -clientWidth * (target.children.length - 1);\n      if (posX <= max) {\n        target.positions.x = max;\n        target.node.style.transform = `translate3d(${max}px, 0px, 0px)`;\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      positions.x = posX;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(target.node, { x: posX });\n    }\n    if (type === 'top') {\n      posY = e.deltaY + target.positions.top;\n      if (posY >= 0) {\n        target.positions.top = 0;\n        target.node.style.top = 0 + 'px';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      if (posY <= -clientHeight) {\n        target.positions.top = -clientHeight;\n        target.node.style.top = -clientHeight + 'px';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n\n      positions.top = posY;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(target.node, { top: posY });\n    }\n\n    if (type === 'left') {\n      posX = target.positions.left + e.deltaX;\n      if (posX >= 0) {\n        target.positions.left = 0;\n        target.node.style.left = 0 + 'px';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      if (posX <= -clientWidth) {\n        target.positions.left = -clientWidth;\n        target.node.style.left = -clientWidth + 'px';\n        // change dragging target\n        this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n        this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n\n      positions.left = posX;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(target.node, { left: posX });\n    }\n\n    if (this.isDifferentEvent) {\n      const draggingInfo = this._getDraggingInfo(this.eventTarget);\n      if (draggingInfo) this.draggingInfo = draggingInfo;\n    }\n    this.stackMoveFromTo = this._getStackMoveFromTo();\n    this.options.dragMove(this);\n    // top 의 경우시\n    // siblingIndex 0, posY 0, -1, -2, ... -> end Event 시 -667\n    // siblingIndex 0 값은 점점 hide, sliblingindex 1값은 하단 부터 점점 노출\n  }\n  _getStackMoveFromTo() {\n    const { from, to, changeableTo } = this.draggingInfo;\n    const result = {\n      from,\n    };\n    if (to !== undefined) {\n      const toParent = this.stacks[to].innerParent;\n      result.to = to;\n      result.toParent = toParent;\n    } else if (changeableTo !== undefined) {\n      const toParent = this.stacks[changeableTo].innerParent;\n      result.to = toParent.lastSeenIndex ? toParent.lastSeenIndex : changeableTo;\n      result.toParent = toParent;\n    }\n    return result;\n  }\n\n  _addEvents() {\n    // mobile 일 경우\n    // touchstart, touchmove, touchend 3가지 등록\n\n    // pc 일 경우\n    // DOMMouseScroll mousewheel\n    // mousedown, mousemove, mouseup\n    // keydown\n\n    // resizeComplete 시 currentIdx 로 이동\n\n    const mc = new hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a(this.containerRef);\n    // save mc instance for remove event listeners - mc.off();\n    this.hammers.push(mc);\n    mc.add(\n      new hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a.Pan({\n        direction: hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a.DIRECTION_ALL,\n        threshold: this.options.threshold\n      })\n    );\n\n    // Hammer pan event issue : not support event.currentTarget\n    this.stacks.forEach(({ node }) => {\n      node.addEventListener('touchstart', this._panstart.bind(this), false);\n    });\n\n    mc.on('panend', this._panend.bind(this));\n    mc.on('panleft', this._panleft.bind(this));\n    mc.on('panright', this._panright.bind(this));\n    mc.on('pandown', this._pandown.bind(this));\n    mc.on('panup', this._panup.bind(this));\n\n    window.addEventListener('resize', this.resizeCallback);\n    window.addEventListener('orientationchange', this.resizeCallback);\n  }\n  _resizeCallback(e) {\n    if (e.type === 'orientationchange') {\n      console.log('orientationchange');\n      const timer = setInterval(() => {\n\n      }, 60);\n    } else {\n      this.setCommonLayout();\n      this.setLayout();\n        // Positions update\n      const root = this.parents[0];\n      this._updatePositions(root);\n      root.children.forEach((child) => {\n        this._updatePositions(child);\n      });\n      this.stacks.forEach((s) => {\n        this._updatePositions(s);\n        this._updatePositions(s.innerParent);\n      });\n    }\n    \n  }\n  _updatePositions({ positions, node }) {\n    const { clientHeight, clientWidth } = this.viewport;\n    const { yResize, topResize, xResize, leftResize } = positions;\n    if (yResize) {\n      positions.y = yResize * clientHeight;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(node, { y: positions.y });\n    }\n    if (topResize) {\n      positions.top = topResize * clientHeight;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(node, { top: positions.top });\n    }\n    if (xResize) {\n      positions.x = xResize * clientWidth;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(node, { x: positions.x });\n    }\n    if (leftResize) {\n      positions.left = leftResize * clientWidth;\n      gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"].set(node, { left: positions.left });\n    }\n  }\n  setCommonLayout() {\n    this.viewport = FullpageSwiper.getViewport();\n    // Block x,y scrolling\n    // Required in Samsung Internet browser\n    document.documentElement.style.overflow = 'hidden';\n    document.documentElement.style.height = '100%';\n    document.documentElement.style.width = '100%';\n\n    document.body.style.overflow = 'hidden';\n    document.body.style.height = '100%';\n    document.body.style.width = '100%';\n  }\n  setLayout() {\n    // 부모 컨테이너 layout\n    this.parents.forEach(parent => {\n      // data-stack-type 에 따라 layout setting\n      // x, y, top, left\n      switch (parent.type) {\n      case 'x':\n        this._layoutX(parent);\n        return;\n      case 'y':\n        this._layoutY(parent);\n        return;\n      case 'top':\n      case 'left':\n        this._layoutFixed(parent);\n        return;\n      }\n    });\n  }\n  _layoutX(parent) {\n    const { clientHeight, clientWidth } = this.viewport;\n    const { node, children } = parent;\n    node.x = node.y = 0;\n    node.style.display = 'flex';\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.width = clientWidth * children.length + 'px';\n    node.style.transform = 'translate3d(0px, 0px, 0px)';\n    children.forEach(({ node }) => {\n      node.style.width = clientWidth + 'px';\n      node.style.height = clientHeight + 'px';\n    });\n  }\n  _layoutY(parent) {\n    const { clientHeight } = this.viewport;\n    const { node, children } = parent;\n    node.x = node.y = 0;\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.height = clientHeight * children.length + 'px';\n    node.style.transform = 'translate3d(0px, 0px, 0px)';\n    children.forEach(({ node }) => {\n      node.style.height = clientHeight + 'px';\n    });\n  }\n  _layoutFixed(parent) {\n    const { clientHeight, clientWidth } = this.viewport;\n    const { node, children } = parent;\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.height = clientHeight + 'px';\n    node.style.width = clientWidth + 'px';\n\n    children.forEach(({ node }, idx, arr) => {\n      node.style.position = 'absolute';\n      node.style.top = 0;\n      node.style.left = 0;\n      node.style.height = clientHeight + 'px';\n      node.style.width = clientWidth + 'px';\n      node.style.zIndex = (arr.length - idx) * 10;\n    });\n  }\n  setParents() {\n    this.parents = Array.from(\n      document.querySelectorAll('[data-stack-type]')\n    ).map(parent => {\n      const type = parent.getAttribute('data-stack-type');\n      const axis =\n        type === 'top' || type === 'y' ? 'vertical' : 'horizontal';\n\n      let children = [];\n      // if parent is root parent\n      if (parent === this.containerRef) {\n        children = Array\n          .from(parent.children)\n          .filter(el => typeof el.getAttribute('data-stack') === 'string');\n      } else {\n        children = Array\n          .from(parent.querySelectorAll('[data-stack]'))\n          .filter(el => typeof el.getAttribute('data-stack') === 'string');\n      }\n\n      return {\n        type,\n        axis,\n        node: parent,\n        isRoot: parent === this.containerRef,\n        children,\n        positions: {\n          x: 0,\n          y: 0,\n          top: 0,\n          left: 0\n        }\n      };\n    });\n  }\n  setStacks() {\n    // filter function - only [data-stack] element\n    const filter = node => {\n      const isStack =\n        node && typeof node.getAttribute('data-stack') === 'string';\n      \n      const result = isStack\n        ? NodeFilter.FILTER_ACCEPT\n        : NodeFilter.FILTER_SKIP;\n     \n      return result;\n    };\n    \n    const walker = document.createTreeWalker(\n      this.containerRef,\n      NodeFilter.SHOW_ELEMENT,\n      filter,\n      false\n    );\n\n    // node is [data-stack] element\n    let node = walker.firstChild();\n    let idx = 0;\n    while (node !== null) {\n      let parentNode = node.parentNode;\n      let type;\n      while (parentNode !== null) {\n        type = parentNode.getAttribute('data-stack-type');\n        if (type) {\n          break;\n        } else {\n          parentNode = parentNode.parentNode;\n        }\n      }\n\n      const isVertical = type === 'top' || type === 'y';\n      const direction = isVertical ? 'vertical' : 'horizontal';\n      const innerParentIndex = this.parents.findIndex(p => p.node === parentNode);\n      const innerParent = this.parents[innerParentIndex];\n\n      if (innerParent.node === this.containerRef) {\n        innerParent.outerParent = null;\n      } else {\n        // data-stack (this is outerParent) > data-stack-type (this is innerParent)\n        const outerParent = this.parents[0].children.find(outer => {\n          return outer.node.querySelector('[data-stack-type]') === parentNode;\n        });\n        if (outerParent) {\n          innerParent.outerParent = outerParent;\n        }\n      }\n\n      const siblingIndex = innerParent.children.findIndex(el => el === node);\n      const stackView = {\n        type,\n        axis: direction,\n        node, // for e.target\n        innerParent,\n        innerParentIndex,\n        isRootLevelStack: innerParent.isRoot,\n        children: innerParent.children,\n        isFirstNode: siblingIndex === 0,\n        isLastNode: siblingIndex === innerParent.children.length - 1,\n        positions: {\n          x: 0,\n          y: 0,\n          top: 0,\n          left: 0\n        },\n        siblingIndex,\n      };\n      innerParent.children[siblingIndex] = stackView;\n\n      const child = walker.firstChild();\n      if (child) {\n        node = child;\n      } else {\n        const next = walker.nextSibling();\n        if (next) {\n          node = next;\n        } else {\n          if (walker.parentNode()) {\n            node = walker.nextSibling();\n          } else {\n            node = null;\n          }\n        }\n      }\n      if (!stackView.isRootLevelStack) {\n        stackView.stackIndex = idx++;\n        stackView.canMoveToSibling = this._canMoveToSibling(stackView);\n        this.stacks.push(stackView);\n      }\n    }\n\n    this.stacks.forEach((item) => {\n      item.canMoveToParent = this._canMoveToParent(item);\n    });\n  }\n  _canMoveToParent(stack) {\n    const axis = this.parents[0].axis;\n    const type = this.parents[0].type;\n\n    const { canMoveToSibling, innerParent, innerParentIndex } = stack;\n    const { outerParent } = innerParent;\n    const result = {\n      up: !canMoveToSibling.up && axis === 'vertical' && !outerParent.isLastNode,\n      down: !canMoveToSibling.down && axis === 'vertical' && !outerParent.isFirstNode,\n      left: !canMoveToSibling.left && axis === 'horizontal' && !outerParent.isLastNode,\n      right: !canMoveToSibling.right && axis === 'horizontal' && !outerParent.isFirstNode\n    };\n\n    if (result.up) {\n      result.up = { \n        from: stack.stackIndex\n      };\n      if (type === 'y') {\n        result.up.draggable = outerParent.innerParent;\n      }\n      if (type === 'top') {\n        result.up.draggable = outerParent;\n      }\n      const nextParent = this.parents[innerParentIndex + 1];\n      if (nextParent.axis === axis) {\n        result.up.to = nextParent.children[0].stackIndex;\n      } else {\n        result.up.changeableTo = nextParent.children[0].stackIndex;\n        // 도착지가 다른 축인 경우\n        // - vertical -> horizontal\n      }\n    }\n    if (result.left) {\n      result.left = { \n        from: stack.stackIndex\n      };\n      if (type === 'x') {\n        result.left.draggable = outerParent.innerParent;\n      }\n      if (type === 'left') {\n        result.left.draggable = outerParent;\n      }\n      const nextParent = this.parents[innerParentIndex + 1];\n      if (nextParent.axis === axis) {\n        result.left.to = nextParent.children[0].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - horizontal -> vertical\n        result.left.changeableTo = nextParent.children[0].stackIndex;\n      }\n    }\n\n    if (result.down) {\n      result.down = { \n        from: stack.stackIndex\n      };\n      if (type === 'y') {\n        result.down.draggable = outerParent.innerParent;\n      }\n      const nextParent = this.parents[innerParentIndex - 1];\n      if (type === 'top') {\n        const draggable = nextParent.outerParent;\n        result.down.draggable = draggable;\n      }\n      if (nextParent.axis === axis) {\n        result.down.to = nextParent.children[nextParent.children.length - 1].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - horizontal -> vertical\n        result.down.changeableTo = nextParent.children[nextParent.children.length - 1].stackIndex;\n      }\n    }\n\n    if (result.right) {\n      result.right = { \n        from: stack.stackIndex\n      };\n      if (type === 'x') {\n        result.right.draggable = outerParent.innerParent;\n      }\n      const nextParent = this.parents[innerParentIndex - 1];\n      if (type === 'left') {\n        const draggable = nextParent.outerParent;\n        result.right.draggable = draggable;\n      }\n      if (nextParent.axis === axis) {\n        result.right.to = nextParent.children[nextParent.children.length - 1].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - vertical -> horizontal\n        result.right.changeableTo \n          = nextParent.children[nextParent.children.length - 1].stackIndex;\n      }\n    }\n\n    return result;\n  }\n  _canMoveToSibling(stack) {\n    const axis = stack.innerParent.axis;\n    const type = stack.innerParent.type;\n    const result = {\n      up: axis === 'vertical' && !stack.isLastNode,\n      down: axis === 'vertical' && !stack.isFirstNode,\n      left: axis === 'horizontal' && !stack.isLastNode,\n      right: axis === 'horizontal' && !stack.isFirstNode,\n    };\n    if (result.up) {\n      result.up = { \n        from: stack.stackIndex, to: stack.stackIndex + 1\n      };\n      if (type === 'y') {\n        result.up.draggable = stack.innerParent;\n      }\n      if (type === 'top') {\n        result.up.draggable = stack;\n      }\n    }\n    if (result.left) {\n      result.left = { from: stack.stackIndex, to: stack.stackIndex + 1 };\n      if (type === 'x') {\n        result.left.draggable = stack.innerParent;\n      }\n      if (type === 'left') {\n        result.left.draggable = stack;\n      }\n    }\n\n    if (result.down) {\n      result.down = { from: stack.stackIndex, to: stack.stackIndex - 1 };\n      if (type === 'y') {\n        result.down.draggable = stack.innerParent;\n      }\n      if (type === 'top') {\n        result.down.draggable = this.stacks[stack.stackIndex - 1];\n      }\n    }\n    if (result.right) {\n      result.right = { from: stack.stackIndex, to: stack.stackIndex - 1 };\n      if (type === 'x') {\n        result.right.draggable = stack.innerParent;\n      }\n      if (type === 'left') {\n        result.right.draggable = this.stacks[stack.stackIndex - 1];\n      }\n    }\n    return result;\n  }\n \n  debug() {\n    this.stacks.forEach(el => {\n      const color = FullpageSwiper.getRandomColor();\n      el.node.style.backgroundColor = color;\n    });\n    // eslint-disable-next-line no-console\n    console.log('STACK_PARENTS: ', this.parents);\n    // eslint-disable-next-line no-console\n    console.log('STACK_VIEW: ', this.stacks);\n    window.fps = this;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL3NyYy9pbmRleC5qcz9hMTc4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBOEI7QUFDTjs7QUFFVDtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLCtDQUFNLEtBQUssNENBQUk7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLENBQUMseURBQU0sRUFBRSxrREFBSTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MsZUFBZTs7QUFFakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Es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QTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxrREFBa0Q7QUFDN0QsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGFtbWVyIGZyb20gJ2hhbW1lcmpzJztcbmltcG9ydCBnc2FwIGZyb20gJ2dzYXAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGdWxscGFnZVN3aXBlciB7XG4gIHN0YXRpYyBnZXRWaWV3cG9ydCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gd2VidmlldyBpc3N1ZSAtIHVuZGVmaW5lZCA6IHdpbmRvdy5pbm5lcldpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHRcbiAgICAgIGNsaWVudFdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICBjbGllbnRIZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0UmFuZG9tQ29sb3IoKSB7XG4gICAgY29uc3QgbGV0dGVycyA9ICcwMTIzNDU2Nzg5QUJDREVGJztcbiAgICBsZXQgY29sb3IgPSAnIyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgIGNvbG9yICs9IGxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG4gIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmNvbnRhaW5lclJlZiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIHRoaXMuY29udGFpbmVyVHlwZSA9IHRoaXMuY29udGFpbmVyUmVmLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGFjay10eXBlJyk7XG4gICAgaWYgKCEodGhpcy5jb250YWluZXJSZWYgJiYgdGhpcy5jb250YWluZXJUeXBlKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdmdWxscGFnZS1zd2lwZXIgaW5pdGlhbGl6YXRpb24gZXJyb3IsIGNoZWNrIHNlbGVjdG9yJyxcbiAgICAgICAgc2VsZWN0b3JcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghSGFtbWVyIHx8ICFnc2FwKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1wiSGFtbWVyXCIgYW5kIFwiZ3NhcFwiIHBlZXJEZXBlbmRlbmNpZXMgYXJlIHJlcXVpcmVkJ1xuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kZXAgPSB7IEhhbW1lciwgZ3NhcCB9O1xuICAgIHRoaXMuY29udGFpbmVyQXhpcyA9XG4gICAgICB0aGlzLmNvbnRhaW5lclR5cGUgPT09ICd0b3AnIHx8IHRoaXMuY29udGFpbmVyVHlwZSA9PT0gJ3knXG4gICAgICAgID8gJ3ZlcnRpY2FsJ1xuICAgICAgICA6ICdob3Jpem9udGFsJztcblxuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBkZWJ1ZzogZmFsc2UgfSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnBhcmVudHMgPSBbXTtcbiAgICB0aGlzLnN0YWNrcyA9IFtdO1xuICAgIHRoaXMuaGFtbWVycyA9IFtdO1xuXG4gICAgdGhpcy5jdXJyZW50SWR4ID0gMDtcbiAgICB0aGlzLmV2ZW50QXhpcyA9ICcnO1xuICAgIHRoaXMuZXZlbnREaXJlY3Rpb24gPSAnJztcbiAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kcmFnZ2luZ1JlZiA9IG51bGw7XG5cbiAgICB0aGlzLnZpZXdwb3J0ID0gRnVsbHBhZ2VTd2lwZXIuZ2V0Vmlld3BvcnQoKTtcblxuICAgIHRoaXMuc2V0UGFyZW50cygpO1xuICAgIHRoaXMuc2V0U3RhY2tzKCk7XG4gICAgdGhpcy5zZXRDb21tb25MYXlvdXQoKTtcbiAgICB0aGlzLnNldExheW91dCgpO1xuXG4gICAgdGhpcy5yZXNpemVDYWxsYmFjayA9IHRoaXMuX3Jlc2l6ZUNhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fYWRkRXZlbnRzKCk7XG4gICAgdGhpcy5vcHRpb25zLmRlYnVnICYmIHRoaXMuZGVidWcoKTtcbiAgfVxuICBjbGVhcigpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXNpemVDYWxsYmFjayk7XG4gIH1cbiAgX2Jsb2NrRXZlbnQoZXZlbnRBeGlzKSB7XG4gICAgLy8g7LWc7LSIIOydtOuypO2KuCDsmpTssq3snbwg6rK97JqwIOu4lOuhnSBYXG4gICAgaWYgKHRoaXMuZXZlbnRBeGlzID09PSAnJykge1xuICAgICAgdGhpcy5ldmVudEF4aXMgPSBldmVudEF4aXM7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8vIDEu65Oc656Y6rmF7KSR7J20IOyVhOuLkCDqsr3smrAg7J2067Kk7Yq4IOu4lOuhnVxuICAgIC8vIDIuIOynhO2WieykkeyduCDrk5zrnpjquYXsnbQg7KG07J6s7ZWY64qUIOqyveyasCwg7JqU7LKtIOydtOuypO2KuCDtg4DsnoXsnbQg64+Z7J287ZWY7KeAIOyViuycvOuptCDruJTroZ1cbiAgICBpZiAoIXRoaXMuaXNEcmFnZ2luZyB8fCB0aGlzLmV2ZW50QXhpcyAhPT0gZXZlbnRBeGlzKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnYmxvY2tlZCBldmVudCcsIGV2ZW50VHlwZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDrj5nsnbztlZwgYXhpc+ydmCDrk5zrnpjquYXspJHsnbgg6rK97JqwIOyXheuNsOydtO2KuFxuICAgIHRoaXMuZXZlbnRBeGlzID0gZXZlbnRBeGlzO1xuICB9XG4gIF9yZXNldERyYWcoKSB7XG4gICAgdGhpcy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgIHRoaXMuZXZlbnRBeGlzID0gJyc7XG4gICAgdGhpcy5ldmVudERpcmVjdGlvbiA9ICcnO1xuICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSBudWxsO1xuICAgIHRoaXMuc3RhY2tNb3ZlRnJvbVRvID0ge307XG4gIH1cbiAgX2dldERyYWdnaW5nSW5mbyhldmVudFRhcmdldCkge1xuICAgIGlmIChldmVudFRhcmdldCkge1xuICAgICAgLy8gb2JqIHsgZnJvbSwgdG8sIGRyYWdnYWJsZSB9XG4gICAgICBsZXQgb2JqID0gZXZlbnRUYXJnZXQuY2FuTW92ZVRvU2libGluZ1t0aGlzLmV2ZW50RGlyZWN0aW9uXTtcbiAgICAgIGlmICghb2JqKSB7XG4gICAgICAgIG9iaiA9IGV2ZW50VGFyZ2V0LmNhbk1vdmVUb1BhcmVudFt0aGlzLmV2ZW50RGlyZWN0aW9uXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmo7IFxuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgX3BhbnN0YXJ0KGUpIHtcbiAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgIHRoaXMuZXZlbnRUYXJnZXQgPSB0aGlzLnN0YWNrcy5maW5kKFxuICAgICAgc3RhY2sgPT4gc3RhY2subm9kZSA9PT0gZS5jdXJyZW50VGFyZ2V0XG4gICAgKTtcbiAgICBpZiAoIXRoaXMuZXZlbnRUYXJnZXQpIHtcbiAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMuZHJhZ1N0YXJ0KHRoaXMpO1xuICB9XG4gIF9wYW5sZWZ0KGUpIHtcbiAgICBjb25zdCBldmVudEF4aXMgPSAnaG9yaXpvbnRhbCc7XG4gICAgaWYgKHRoaXMuX2Jsb2NrRXZlbnQoZXZlbnRBeGlzKSkgcmV0dXJuO1xuICAgIHRoaXMuaXNEaWZmZXJlbnRFdmVudCA9IHRoaXMuZXZlbnREaXJlY3Rpb24gJiYgdGhpcy5ldmVudERpcmVjdGlvbiAhPT0gJ2xlZnQnO1xuXG4gICAgdGhpcy5ldmVudERpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAvLyBjb25zb2xlLmxvZygnU1RBUlQ6JywgZXZlbnRUeXBlLmRpcmVjdGlvbik7XG4gICAgXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLl9yZXNldERyYWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZHJhZ2dpbmcoZSk7XG4gICAgfVxuICB9XG4gIF9wYW5yaWdodChlKSB7XG4gICAgY29uc3QgZXZlbnRBeGlzID0gJ2hvcml6b250YWwnO1xuICAgIGlmICh0aGlzLl9ibG9ja0V2ZW50KGV2ZW50QXhpcykpIHJldHVybjtcbiAgICB0aGlzLmlzRGlmZmVyZW50RXZlbnQgPSB0aGlzLmV2ZW50RGlyZWN0aW9uICYmIHRoaXMuZXZlbnREaXJlY3Rpb24gIT09ICdyaWdodCc7XG5cbiAgICB0aGlzLmV2ZW50RGlyZWN0aW9uID0gJ3JpZ2h0JztcbiAgICAvLyBjb25zb2xlLmxvZygnU1RBUlQ6JywgZXZlbnRUeXBlLmRpcmVjdGlvbik7XG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLl9yZXNldERyYWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZHJhZ2dpbmcoZSk7XG4gICAgfVxuICB9XG4gIF9wYW5kb3duKGUpIHtcbiAgICBjb25zdCBldmVudEF4aXMgPSAndmVydGljYWwnO1xuICAgIGlmICh0aGlzLl9ibG9ja0V2ZW50KGV2ZW50QXhpcykpIHJldHVybjtcbiAgICB0aGlzLmlzRGlmZmVyZW50RXZlbnQgPSB0aGlzLmV2ZW50RGlyZWN0aW9uICYmIHRoaXMuZXZlbnREaXJlY3Rpb24gIT09ICdkb3duJztcblxuICAgIHRoaXMuZXZlbnREaXJlY3Rpb24gPSAnZG93bic7XG4gICAgLy8gY29uc29sZS5sb2coJ1NUQVJUOicsIGV2ZW50VHlwZS5kaXJlY3Rpb24sIHRoaXMuZHJhZ2dpbmdSZWYpO1xuICAgIGlmICghdGhpcy5kcmFnZ2luZ1JlZikge1xuICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICB0aGlzLmRyYWdnaW5nUmVmID0gdGhpcy5kcmFnZ2luZ0luZm8uZHJhZ2dhYmxlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5kcmFnZ2luZ1JlZikge1xuICAgICAgdGhpcy5fcmVzZXREcmFnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2RyYWdnaW5nKGUpO1xuICAgIH1cbiAgfVxuICBcbiAgX3BhbnVwKGUpIHtcbiAgICBjb25zdCBldmVudEF4aXMgPSAndmVydGljYWwnO1xuICAgIGlmICh0aGlzLl9ibG9ja0V2ZW50KGV2ZW50QXhpcykpIHJldHVybjtcbiAgICB0aGlzLmlzRGlmZmVyZW50RXZlbnQgPSB0aGlzLmV2ZW50RGlyZWN0aW9uICYmIHRoaXMuZXZlbnREaXJlY3Rpb24gIT09ICd1cCc7XG4gICAgdGhpcy5ldmVudERpcmVjdGlvbiA9ICd1cCc7XG4gICAgLy8gY29uc29sZS5sb2coJ2Zyb20gdG8nLCBkYXRhLmZyb20sIGRhdGEudG8pO1xuXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmRyYWdnaW5nUmVmKSB7XG4gICAgICB0aGlzLl9yZXNldERyYWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZHJhZ2dpbmcoZSk7XG4gICAgfVxuICB9XG4gIF9lbmRDYWxsYmFjaygpIHtcbiAgICBjb25zdCB7IHN0YWNrTW92ZUZyb21UbyB9ID0gdGhpcztcbiAgICBpZiAoc3RhY2tNb3ZlRnJvbVRvLmZyb20gIT09IHN0YWNrTW92ZUZyb21Uby50bykge1xuICAgICAgaWYgKHN0YWNrTW92ZUZyb21Uby50b1BhcmVudCkge1xuICAgICAgICBzdGFja01vdmVGcm9tVG8udG9QYXJlbnQubGFzdFNlZW5JbmRleCA9IHN0YWNrTW92ZUZyb21Uby50bztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jdXJyZW50SWR4ID0gc3RhY2tNb3ZlRnJvbVRvLnRvO1xuICAgIHRoaXMub3B0aW9ucy5kcmFnRW5kKHRoaXMpO1xuICAgIHRoaXMuX3Jlc2V0RHJhZygpO1xuICB9XG4gIF9wYW5lbmQoKSB7XG4gICAgaWYgKHRoaXMuZHJhZ2dpbmdSZWYpIHtcbiAgICAgIC8vIGdzYXAg7L2c67Cx64K07JeQ7IScIHRoaXMuZHJhZ2dpbmdSZWYg7J2YIOqwkuydtCBudWxsIOydtCDrkKAg6rCA64ql7ISx7J20IOyhtOyerO2VmOuvgOuhnFxuICAgICAgLy8g65Oc656Y6rmF65CY64qUIOqwneyytOydmCDso7zshozsp4Drpbwg67OA7IiY66GcIOyggOyepe2VtOyEnCDsgqzsmqlcbiAgICAgIGNvbnN0IGRyYWdnaW5nUmVmID0gdGhpcy5kcmFnZ2luZ1JlZjtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZXZlbnREaXJlY3Rpb247XG4gICAgICBjb25zdCB7IHR5cGUgfSA9IGRyYWdnaW5nUmVmO1xuICAgICAgY29uc3QgeyBjbGllbnRIZWlnaHQsIGNsaWVudFdpZHRoIH0gPSB0aGlzLnZpZXdwb3J0O1xuICAgICAgY29uc3QgdCA9IGdzYXAudGltZWxpbmUoKTtcblxuICAgICAgaWYgKHR5cGUgPT09ICd0b3AnKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICBpZiAoZHJhZ2dpbmdSZWYucG9zaXRpb25zLnRvcCAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFja01vdmVGcm9tVG8udG8gPSB0aGlzLnN0YWNrTW92ZUZyb21Uby5mcm9tO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0LnRvKGRyYWdnaW5nUmVmLm5vZGUsIHsgdG9wOiAtY2xpZW50SGVpZ2h0IH0pLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMudG9wID0gLWNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGRyYWdnaW5nUmVmLnBvc2l0aW9ucy50b3BSZXNpemUgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuX2VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgaWYgKGRyYWdnaW5nUmVmLnBvc2l0aW9ucy50b3AgPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tNb3ZlRnJvbVRvLnRvID0gdGhpcy5zdGFja01vdmVGcm9tVG8uZnJvbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdC50byhkcmFnZ2luZ1JlZi5ub2RlLCB7IHRvcDogMCB9KS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnRvcCA9IDA7XG4gICAgICAgICAgICBkZWxldGUgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnRvcFJlc2l6ZTtcbiAgICAgICAgICAgIHRoaXMuX2VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSAnbGVmdCcpIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgaWYgKGRyYWdnaW5nUmVmLnBvc2l0aW9ucy5sZWZ0ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrTW92ZUZyb21Uby50byA9IHRoaXMuc3RhY2tNb3ZlRnJvbVRvLmZyb207XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdC50byhkcmFnZ2luZ1JlZi5ub2RlLCB7IGxlZnQ6IC1jbGllbnRXaWR0aCB9KS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLmxlZnQgPSAtY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMubGVmdFJlc2l6ZSA9IC0xO1xuICAgICAgICAgICAgdGhpcy5fZW5kQ2FsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgaWYgKGRyYWdnaW5nUmVmLnBvc2l0aW9ucy5sZWZ0ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrTW92ZUZyb21Uby50byA9IHRoaXMuc3RhY2tNb3ZlRnJvbVRvLmZyb207XG4gICAgICAgICAgfVxuICAgICAgICAgIHQudG8oZHJhZ2dpbmdSZWYubm9kZSwgeyBsZWZ0OiAwIH0pLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMubGVmdCA9IDA7XG4gICAgICAgICAgICBkZWxldGUgZHJhZ2dpbmdSZWYucG9zaXRpb25zLmxlZnRSZXNpemU7XG4gICAgICAgICAgICB0aGlzLl9lbmRDYWxsYmFjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAneScpIHtcbiAgICAgICAgY29uc3QgZ2FwID0gZHJhZ2dpbmdSZWYucG9zaXRpb25zLnkgLSB0aGlzLnNuYXBzaG90UG9zaXRpb25zLnk7XG4gICAgICAgIGNvbnN0IHkgPSBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICAgIGNvbnN0IGNhbk5leHQgPSB0aGlzLnNuYXBzaG90UG9zaXRpb25zLnkgPCB5O1xuICAgICAgICAgIGxldCBtb3ZlID0geTtcbiAgICAgICAgICBpZiAoY2FuTmV4dCkge1xuICAgICAgICAgICAgbW92ZSA9IHkgLSBjbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBtYXggPSAtY2xpZW50SGVpZ2h0ICogKGRyYWdnaW5nUmVmLmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaWYgKG1vdmUgPCBtYXgpIG1vdmUgPSBtYXg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdhcCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tNb3ZlRnJvbVRvLnRvID0gdGhpcy5zdGFja01vdmVGcm9tVG8uZnJvbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0LnRvKGRyYWdnaW5nUmVmLm5vZGUsIHsgeTogbW92ZSB9KS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnkgPSBtb3ZlO1xuICAgICAgICAgICAgaWYgKG1vdmUgIT09IDApIHtcbiAgICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnlSZXNpemUgPSBtb3ZlL2NsaWVudEhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueVJlc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgY29uc3QgY2FuTmV4dCA9IHRoaXMuc25hcHNob3RQb3NpdGlvbnMueSA+IHk7XG4gICAgICAgICAgbGV0IG1vdmUgPSB5O1xuICAgICAgICAgIGlmIChjYW5OZXh0KSB7XG4gICAgICAgICAgICBtb3ZlID0geSArIGNsaWVudEhlaWdodDtcbiAgICAgICAgICAgIGlmIChtb3ZlID49IDApIG1vdmUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZ2FwID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFja01vdmVGcm9tVG8udG8gPSB0aGlzLnN0YWNrTW92ZUZyb21Uby5mcm9tO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0LnRvKGRyYWdnaW5nUmVmLm5vZGUsIHsgeTogbW92ZSB9KS5hZGQoKCkgPT4ge1xuICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnkgPSBtb3ZlO1xuICAgICAgICAgICAgaWYgKG1vdmUgIT09IDApIHtcbiAgICAgICAgICAgICAgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnlSZXNpemUgPSBtb3ZlL2NsaWVudEhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueVJlc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICd4Jykge1xuICAgICAgICBjb25zdCB4ID0gZHJhZ2dpbmdSZWYucG9zaXRpb25zLng7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgIGNvbnN0IGNhbk5leHQgPSB0aGlzLnNuYXBzaG90UG9zaXRpb25zLnggPCB4O1xuXG4gICAgICAgICAgbGV0IG1vdmUgPSB4O1xuICAgICAgICAgIGlmIChjYW5OZXh0KSB7XG4gICAgICAgICAgICBtb3ZlID0geCAtIGNsaWVudFdpZHRoO1xuICAgICAgICAgICAgY29uc3QgbWF4ID0gLWNsaWVudFdpZHRoICogKGRyYWdnaW5nUmVmLmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgaWYgKG1vdmUgPCBtYXgpIG1vdmUgPSBtYXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2tNb3ZlRnJvbVRvLnRvID0gdGhpcy5zdGFja01vdmVGcm9tVG8uZnJvbTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdC50byhkcmFnZ2luZ1JlZi5ub2RlLCB7IHg6IG1vdmUgfSkuYWRkKCgpID0+IHtcbiAgICAgICAgICAgIGRyYWdnaW5nUmVmLnBvc2l0aW9ucy54ID0gbW92ZTtcbiAgICAgICAgICAgIGlmIChtb3ZlICE9PSAwKSB7XG4gICAgICAgICAgICAgIGRyYWdnaW5nUmVmLnBvc2l0aW9ucy54UmVzaXplID0gbW92ZS9jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueFJlc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGNvbnN0IGNhbk5leHQgPSB0aGlzLnNuYXBzaG90UG9zaXRpb25zLnggPiB4O1xuICAgICAgICAgIGxldCBtb3ZlID0geDtcbiAgICAgICAgICBpZiAoY2FuTmV4dCkge1xuICAgICAgICAgICAgbW92ZSA9IHggKyBjbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGlmIChtb3ZlID49IDApIG1vdmUgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrTW92ZUZyb21Uby50byA9IHRoaXMuc3RhY2tNb3ZlRnJvbVRvLmZyb207XG4gICAgICAgICAgfVxuICAgICAgICAgIHQudG8oZHJhZ2dpbmdSZWYubm9kZSwgeyB4OiBtb3ZlIH0pLmFkZCgoKSA9PiB7XG4gICAgICAgICAgICBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueCA9IG1vdmU7XG4gICAgICAgICAgICBpZiAobW92ZSAhPT0gMCkge1xuICAgICAgICAgICAgICBkcmFnZ2luZ1JlZi5wb3NpdGlvbnMueFJlc2l6ZSA9IG1vdmUvY2xpZW50V2lkdGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkZWxldGUgZHJhZ2dpbmdSZWYucG9zaXRpb25zLnhSZXNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9lbmRDYWxsYmFjaygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc2V0RHJhZygpO1xuICAgIH1cbiAgfVxuICAvLyB0b2RvXG4gIC8vIHRoaXMuZGlzdGFuY2Ug6rCS7JeQIOuUsOudvCDrk5zrnpjqt7gg6rCA64+Z67KU7JyEIOyFi+2MhSDqsIDriqXtlZjrj4TroZ1cbiAgLy8gTWF0aC5hYnMoZS5kZWx0YVkpLCBNYXRoLmFicyhlLmRlbHRhWClcbiAgX2RyYWdnaW5nKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmRyYWdnaW5nUmVmO1xuICAgIGNvbnN0IHsgdHlwZSB9ID0gdGFyZ2V0O1xuICAgIGNvbnN0IHsgY2xpZW50SGVpZ2h0LCBjbGllbnRXaWR0aCB9ID0gdGhpcy52aWV3cG9ydDtcblxuICAgIHRoaXMuc25hcHNob3RQb3NpdGlvbnMgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IHRoaXMuc25hcHNob3RQb3NpdGlvbnM7XG4gICAgbGV0IHBvc1ksIHBvc1g7XG4gICAgaWYgKHR5cGUgPT09ICd5Jykge1xuICAgICAgcG9zWSA9IGUuZGVsdGFZICsgdGFyZ2V0LnBvc2l0aW9ucy55O1xuXG4gICAgICBpZiAocG9zWSA+PSAwKSB7XG4gICAgICAgIHRhcmdldC5wb3NpdGlvbnMueSA9IDA7XG4gICAgICAgIHRhcmdldC5ub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG1heCA9IC1jbGllbnRIZWlnaHQgKiAodGFyZ2V0LmNoaWxkcmVuLmxlbmd0aCAtIDEpO1xuICAgICAgICBpZiAocG9zWSA8PSBtYXgpIHtcbiAgICAgICAgICB0YXJnZXQucG9zaXRpb25zLnkgPSBtYXg7XG4gICAgICAgICAgdGFyZ2V0Lm5vZGUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHttYXh9cHgsIDBweClgO1xuICAgICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICB0aGlzLmRyYWdnaW5nUmVmID0gdGhpcy5kcmFnZ2luZ0luZm8uZHJhZ2dhYmxlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwb3NpdGlvbnMueSA9IHBvc1k7XG4gICAgICBnc2FwLnNldCh0YXJnZXQubm9kZSwgeyB5OiBwb3NZIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ3gnKSB7XG4gICAgICBwb3NYID0gZS5kZWx0YVggKyB0YXJnZXQucG9zaXRpb25zLng7XG4gICAgICBpZiAocG9zWCA+PSAwKSB7XG4gICAgICAgIHRhcmdldC5wb3NpdGlvbnMueCA9IDA7XG4gICAgICAgIHRhcmdldC5ub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1heCA9IC1jbGllbnRXaWR0aCAqICh0YXJnZXQuY2hpbGRyZW4ubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAocG9zWCA8PSBtYXgpIHtcbiAgICAgICAgdGFyZ2V0LnBvc2l0aW9ucy54ID0gbWF4O1xuICAgICAgICB0YXJnZXQubm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHttYXh9cHgsIDBweCwgMHB4KWA7XG4gICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9ucy54ID0gcG9zWDtcbiAgICAgIGdzYXAuc2V0KHRhcmdldC5ub2RlLCB7IHg6IHBvc1ggfSk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAndG9wJykge1xuICAgICAgcG9zWSA9IGUuZGVsdGFZICsgdGFyZ2V0LnBvc2l0aW9ucy50b3A7XG4gICAgICBpZiAocG9zWSA+PSAwKSB7XG4gICAgICAgIHRhcmdldC5wb3NpdGlvbnMudG9wID0gMDtcbiAgICAgICAgdGFyZ2V0Lm5vZGUuc3R5bGUudG9wID0gMCArICdweCc7XG4gICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NZIDw9IC1jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgdGFyZ2V0LnBvc2l0aW9ucy50b3AgPSAtY2xpZW50SGVpZ2h0O1xuICAgICAgICB0YXJnZXQubm9kZS5zdHlsZS50b3AgPSAtY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgLy8gY2hhbmdlIGRyYWdnaW5nIHRhcmdldFxuICAgICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgICAgdGhpcy5kcmFnZ2luZ1JlZiA9IHRoaXMuZHJhZ2dpbmdJbmZvLmRyYWdnYWJsZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwb3NpdGlvbnMudG9wID0gcG9zWTtcbiAgICAgIGdzYXAuc2V0KHRhcmdldC5ub2RlLCB7IHRvcDogcG9zWSB9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gJ2xlZnQnKSB7XG4gICAgICBwb3NYID0gdGFyZ2V0LnBvc2l0aW9ucy5sZWZ0ICsgZS5kZWx0YVg7XG4gICAgICBpZiAocG9zWCA+PSAwKSB7XG4gICAgICAgIHRhcmdldC5wb3NpdGlvbnMubGVmdCA9IDA7XG4gICAgICAgIHRhcmdldC5ub2RlLnN0eWxlLmxlZnQgPSAwICsgJ3B4JztcbiAgICAgICAgLy8gY2hhbmdlIGRyYWdnaW5nIHRhcmdldFxuICAgICAgICB0aGlzLmRyYWdnaW5nSW5mbyA9IHRoaXMuX2dldERyYWdnaW5nSW5mbyh0aGlzLmV2ZW50VGFyZ2V0KTtcbiAgICAgICAgdGhpcy5kcmFnZ2luZ1JlZiA9IHRoaXMuZHJhZ2dpbmdJbmZvLmRyYWdnYWJsZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBvc1ggPD0gLWNsaWVudFdpZHRoKSB7XG4gICAgICAgIHRhcmdldC5wb3NpdGlvbnMubGVmdCA9IC1jbGllbnRXaWR0aDtcbiAgICAgICAgdGFyZ2V0Lm5vZGUuc3R5bGUubGVmdCA9IC1jbGllbnRXaWR0aCArICdweCc7XG4gICAgICAgIC8vIGNoYW5nZSBkcmFnZ2luZyB0YXJnZXRcbiAgICAgICAgdGhpcy5kcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICAgIHRoaXMuZHJhZ2dpbmdSZWYgPSB0aGlzLmRyYWdnaW5nSW5mby5kcmFnZ2FibGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcG9zaXRpb25zLmxlZnQgPSBwb3NYO1xuICAgICAgZ3NhcC5zZXQodGFyZ2V0Lm5vZGUsIHsgbGVmdDogcG9zWCB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0RpZmZlcmVudEV2ZW50KSB7XG4gICAgICBjb25zdCBkcmFnZ2luZ0luZm8gPSB0aGlzLl9nZXREcmFnZ2luZ0luZm8odGhpcy5ldmVudFRhcmdldCk7XG4gICAgICBpZiAoZHJhZ2dpbmdJbmZvKSB0aGlzLmRyYWdnaW5nSW5mbyA9IGRyYWdnaW5nSW5mbztcbiAgICB9XG4gICAgdGhpcy5zdGFja01vdmVGcm9tVG8gPSB0aGlzLl9nZXRTdGFja01vdmVGcm9tVG8oKTtcbiAgICB0aGlzLm9wdGlvbnMuZHJhZ01vdmUodGhpcyk7XG4gICAgLy8gdG9wIOydmCDqsr3smrDsi5xcbiAgICAvLyBzaWJsaW5nSW5kZXggMCwgcG9zWSAwLCAtMSwgLTIsIC4uLiAtPiBlbmQgRXZlbnQg7IucIC02NjdcbiAgICAvLyBzaWJsaW5nSW5kZXggMCDqsJLsnYAg7KCQ7KCQIGhpZGUsIHNsaWJsaW5naW5kZXggMeqwkuydgCDtlZjri6gg67aA7YSwIOygkOygkCDrhbjstpxcbiAgfVxuICBfZ2V0U3RhY2tNb3ZlRnJvbVRvKCkge1xuICAgIGNvbnN0IHsgZnJvbSwgdG8sIGNoYW5nZWFibGVUbyB9ID0gdGhpcy5kcmFnZ2luZ0luZm87XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgZnJvbSxcbiAgICB9O1xuICAgIGlmICh0byAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0b1BhcmVudCA9IHRoaXMuc3RhY2tzW3RvXS5pbm5lclBhcmVudDtcbiAgICAgIHJlc3VsdC50byA9IHRvO1xuICAgICAgcmVzdWx0LnRvUGFyZW50ID0gdG9QYXJlbnQ7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VhYmxlVG8gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgdG9QYXJlbnQgPSB0aGlzLnN0YWNrc1tjaGFuZ2VhYmxlVG9dLmlubmVyUGFyZW50O1xuICAgICAgcmVzdWx0LnRvID0gdG9QYXJlbnQubGFzdFNlZW5JbmRleCA/IHRvUGFyZW50Lmxhc3RTZWVuSW5kZXggOiBjaGFuZ2VhYmxlVG87XG4gICAgICByZXN1bHQudG9QYXJlbnQgPSB0b1BhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIF9hZGRFdmVudHMoKSB7XG4gICAgLy8gbW9iaWxlIOydvCDqsr3smrBcbiAgICAvLyB0b3VjaHN0YXJ0LCB0b3VjaG1vdmUsIHRvdWNoZW5kIDPqsIDsp4Ag65Ox66GdXG5cbiAgICAvLyBwYyDsnbwg6rK97JqwXG4gICAgLy8gRE9NTW91c2VTY3JvbGwgbW91c2V3aGVlbFxuICAgIC8vIG1vdXNlZG93biwgbW91c2Vtb3ZlLCBtb3VzZXVwXG4gICAgLy8ga2V5ZG93blxuXG4gICAgLy8gcmVzaXplQ29tcGxldGUg7IucIGN1cnJlbnRJZHgg66GcIOydtOuPmVxuXG4gICAgY29uc3QgbWMgPSBuZXcgSGFtbWVyKHRoaXMuY29udGFpbmVyUmVmKTtcbiAgICAvLyBzYXZlIG1jIGluc3RhbmNlIGZvciByZW1vdmUgZXZlbnQgbGlzdGVuZXJzIC0gbWMub2ZmKCk7XG4gICAgdGhpcy5oYW1tZXJzLnB1c2gobWMpO1xuICAgIG1jLmFkZChcbiAgICAgIG5ldyBIYW1tZXIuUGFuKHtcbiAgICAgICAgZGlyZWN0aW9uOiBIYW1tZXIuRElSRUNUSU9OX0FMTCxcbiAgICAgICAgdGhyZXNob2xkOiB0aGlzLm9wdGlvbnMudGhyZXNob2xkXG4gICAgICB9KVxuICAgICk7XG5cbiAgICAvLyBIYW1tZXIgcGFuIGV2ZW50IGlzc3VlIDogbm90IHN1cHBvcnQgZXZlbnQuY3VycmVudFRhcmdldFxuICAgIHRoaXMuc3RhY2tzLmZvckVhY2goKHsgbm9kZSB9KSA9PiB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9wYW5zdGFydC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBtYy5vbigncGFuZW5kJywgdGhpcy5fcGFuZW5kLmJpbmQodGhpcykpO1xuICAgIG1jLm9uKCdwYW5sZWZ0JywgdGhpcy5fcGFubGVmdC5iaW5kKHRoaXMpKTtcbiAgICBtYy5vbigncGFucmlnaHQnLCB0aGlzLl9wYW5yaWdodC5iaW5kKHRoaXMpKTtcbiAgICBtYy5vbigncGFuZG93bicsIHRoaXMuX3BhbmRvd24uYmluZCh0aGlzKSk7XG4gICAgbWMub24oJ3BhbnVwJywgdGhpcy5fcGFudXAuYmluZCh0aGlzKSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXNpemVDYWxsYmFjayk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcy5yZXNpemVDYWxsYmFjayk7XG4gIH1cbiAgX3Jlc2l6ZUNhbGxiYWNrKGUpIHtcbiAgICBpZiAoZS50eXBlID09PSAnb3JpZW50YXRpb25jaGFuZ2UnKSB7XG4gICAgICBjb25zb2xlLmxvZygnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXG4gICAgICB9LCA2MCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q29tbW9uTGF5b3V0KCk7XG4gICAgICB0aGlzLnNldExheW91dCgpO1xuICAgICAgICAvLyBQb3NpdGlvbnMgdXBkYXRlXG4gICAgICBjb25zdCByb290ID0gdGhpcy5wYXJlbnRzWzBdO1xuICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb25zKHJvb3QpO1xuICAgICAgcm9vdC5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICB0aGlzLl91cGRhdGVQb3NpdGlvbnMoY2hpbGQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnN0YWNrcy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9ucyhzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlUG9zaXRpb25zKHMuaW5uZXJQYXJlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICB9XG4gIF91cGRhdGVQb3NpdGlvbnMoeyBwb3NpdGlvbnMsIG5vZGUgfSkge1xuICAgIGNvbnN0IHsgY2xpZW50SGVpZ2h0LCBjbGllbnRXaWR0aCB9ID0gdGhpcy52aWV3cG9ydDtcbiAgICBjb25zdCB7IHlSZXNpemUsIHRvcFJlc2l6ZSwgeFJlc2l6ZSwgbGVmdFJlc2l6ZSB9ID0gcG9zaXRpb25zO1xuICAgIGlmICh5UmVzaXplKSB7XG4gICAgICBwb3NpdGlvbnMueSA9IHlSZXNpemUgKiBjbGllbnRIZWlnaHQ7XG4gICAgICBnc2FwLnNldChub2RlLCB7IHk6IHBvc2l0aW9ucy55IH0pO1xuICAgIH1cbiAgICBpZiAodG9wUmVzaXplKSB7XG4gICAgICBwb3NpdGlvbnMudG9wID0gdG9wUmVzaXplICogY2xpZW50SGVpZ2h0O1xuICAgICAgZ3NhcC5zZXQobm9kZSwgeyB0b3A6IHBvc2l0aW9ucy50b3AgfSk7XG4gICAgfVxuICAgIGlmICh4UmVzaXplKSB7XG4gICAgICBwb3NpdGlvbnMueCA9IHhSZXNpemUgKiBjbGllbnRXaWR0aDtcbiAgICAgIGdzYXAuc2V0KG5vZGUsIHsgeDogcG9zaXRpb25zLnggfSk7XG4gICAgfVxuICAgIGlmIChsZWZ0UmVzaXplKSB7XG4gICAgICBwb3NpdGlvbnMubGVmdCA9IGxlZnRSZXNpemUgKiBjbGllbnRXaWR0aDtcbiAgICAgIGdzYXAuc2V0KG5vZGUsIHsgbGVmdDogcG9zaXRpb25zLmxlZnQgfSk7XG4gICAgfVxuICB9XG4gIHNldENvbW1vbkxheW91dCgpIHtcbiAgICB0aGlzLnZpZXdwb3J0ID0gRnVsbHBhZ2VTd2lwZXIuZ2V0Vmlld3BvcnQoKTtcbiAgICAvLyBCbG9jayB4LHkgc2Nyb2xsaW5nXG4gICAgLy8gUmVxdWlyZWQgaW4gU2Ftc3VuZyBJbnRlcm5ldCBicm93c2VyXG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG5cbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgfVxuICBzZXRMYXlvdXQoKSB7XG4gICAgLy8g67aA66qoIOy7qO2FjOydtOuEiCBsYXlvdXRcbiAgICB0aGlzLnBhcmVudHMuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgLy8gZGF0YS1zdGFjay10eXBlIOyXkCDrlLDrnbwgbGF5b3V0IHNldHRpbmdcbiAgICAgIC8vIHgsIHksIHRvcCwgbGVmdFxuICAgICAgc3dpdGNoIChwYXJlbnQudHlwZSkge1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHRoaXMuX2xheW91dFgocGFyZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAneSc6XG4gICAgICAgIHRoaXMuX2xheW91dFkocGFyZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAndG9wJzpcbiAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICB0aGlzLl9sYXlvdXRGaXhlZChwYXJlbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX2xheW91dFgocGFyZW50KSB7XG4gICAgY29uc3QgeyBjbGllbnRIZWlnaHQsIGNsaWVudFdpZHRoIH0gPSB0aGlzLnZpZXdwb3J0O1xuICAgIGNvbnN0IHsgbm9kZSwgY2hpbGRyZW4gfSA9IHBhcmVudDtcbiAgICBub2RlLnggPSBub2RlLnkgPSAwO1xuICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICBub2RlLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgbm9kZS5zdHlsZS53aWR0aCA9IGNsaWVudFdpZHRoICogY2hpbGRyZW4ubGVuZ3RoICsgJ3B4JztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoeyBub2RlIH0pID0+IHtcbiAgICAgIG5vZGUuc3R5bGUud2lkdGggPSBjbGllbnRXaWR0aCArICdweCc7XG4gICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGNsaWVudEhlaWdodCArICdweCc7XG4gICAgfSk7XG4gIH1cbiAgX2xheW91dFkocGFyZW50KSB7XG4gICAgY29uc3QgeyBjbGllbnRIZWlnaHQgfSA9IHRoaXMudmlld3BvcnQ7XG4gICAgY29uc3QgeyBub2RlLCBjaGlsZHJlbiB9ID0gcGFyZW50O1xuICAgIG5vZGUueCA9IG5vZGUueSA9IDA7XG4gICAgbm9kZS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gY2xpZW50SGVpZ2h0ICogY2hpbGRyZW4ubGVuZ3RoICsgJ3B4JztcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gICAgY2hpbGRyZW4uZm9yRWFjaCgoeyBub2RlIH0pID0+IHtcbiAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICB9KTtcbiAgfVxuICBfbGF5b3V0Rml4ZWQocGFyZW50KSB7XG4gICAgY29uc3QgeyBjbGllbnRIZWlnaHQsIGNsaWVudFdpZHRoIH0gPSB0aGlzLnZpZXdwb3J0O1xuICAgIGNvbnN0IHsgbm9kZSwgY2hpbGRyZW4gfSA9IHBhcmVudDtcbiAgICBub2RlLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBjbGllbnRIZWlnaHQgKyAncHgnO1xuICAgIG5vZGUuc3R5bGUud2lkdGggPSBjbGllbnRXaWR0aCArICdweCc7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKCh7IG5vZGUgfSwgaWR4LCBhcnIpID0+IHtcbiAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgbm9kZS5zdHlsZS50b3AgPSAwO1xuICAgICAgbm9kZS5zdHlsZS5sZWZ0ID0gMDtcbiAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gY2xpZW50SGVpZ2h0ICsgJ3B4JztcbiAgICAgIG5vZGUuc3R5bGUud2lkdGggPSBjbGllbnRXaWR0aCArICdweCc7XG4gICAgICBub2RlLnN0eWxlLnpJbmRleCA9IChhcnIubGVuZ3RoIC0gaWR4KSAqIDEwO1xuICAgIH0pO1xuICB9XG4gIHNldFBhcmVudHMoKSB7XG4gICAgdGhpcy5wYXJlbnRzID0gQXJyYXkuZnJvbShcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXN0YWNrLXR5cGVdJylcbiAgICApLm1hcChwYXJlbnQgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhY2stdHlwZScpO1xuICAgICAgY29uc3QgYXhpcyA9XG4gICAgICAgIHR5cGUgPT09ICd0b3AnIHx8IHR5cGUgPT09ICd5JyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG5cbiAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgLy8gaWYgcGFyZW50IGlzIHJvb3QgcGFyZW50XG4gICAgICBpZiAocGFyZW50ID09PSB0aGlzLmNvbnRhaW5lclJlZikge1xuICAgICAgICBjaGlsZHJlbiA9IEFycmF5XG4gICAgICAgICAgLmZyb20ocGFyZW50LmNoaWxkcmVuKVxuICAgICAgICAgIC5maWx0ZXIoZWwgPT4gdHlwZW9mIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGFjaycpID09PSAnc3RyaW5nJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IEFycmF5XG4gICAgICAgICAgLmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXN0YWNrXScpKVxuICAgICAgICAgIC5maWx0ZXIoZWwgPT4gdHlwZW9mIGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGFjaycpID09PSAnc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGUsXG4gICAgICAgIGF4aXMsXG4gICAgICAgIG5vZGU6IHBhcmVudCxcbiAgICAgICAgaXNSb290OiBwYXJlbnQgPT09IHRoaXMuY29udGFpbmVyUmVmLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgc2V0U3RhY2tzKCkge1xuICAgIC8vIGZpbHRlciBmdW5jdGlvbiAtIG9ubHkgW2RhdGEtc3RhY2tdIGVsZW1lbnRcbiAgICBjb25zdCBmaWx0ZXIgPSBub2RlID0+IHtcbiAgICAgIGNvbnN0IGlzU3RhY2sgPVxuICAgICAgICBub2RlICYmIHR5cGVvZiBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGFjaycpID09PSAnc3RyaW5nJztcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gaXNTdGFja1xuICAgICAgICA/IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxuICAgICAgICA6IE5vZGVGaWx0ZXIuRklMVEVSX1NLSVA7XG4gICAgIFxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoXG4gICAgICB0aGlzLmNvbnRhaW5lclJlZixcbiAgICAgIE5vZGVGaWx0ZXIuU0hPV19FTEVNRU5ULFxuICAgICAgZmlsdGVyLFxuICAgICAgZmFsc2VcbiAgICApO1xuXG4gICAgLy8gbm9kZSBpcyBbZGF0YS1zdGFja10gZWxlbWVudFxuICAgIGxldCBub2RlID0gd2Fsa2VyLmZpcnN0Q2hpbGQoKTtcbiAgICBsZXQgaWR4ID0gMDtcbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgbGV0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICBsZXQgdHlwZTtcbiAgICAgIHdoaWxlIChwYXJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgIHR5cGUgPSBwYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1zdGFjay10eXBlJyk7XG4gICAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdHlwZSA9PT0gJ3RvcCcgfHwgdHlwZSA9PT0gJ3knO1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gaXNWZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICBjb25zdCBpbm5lclBhcmVudEluZGV4ID0gdGhpcy5wYXJlbnRzLmZpbmRJbmRleChwID0+IHAubm9kZSA9PT0gcGFyZW50Tm9kZSk7XG4gICAgICBjb25zdCBpbm5lclBhcmVudCA9IHRoaXMucGFyZW50c1tpbm5lclBhcmVudEluZGV4XTtcblxuICAgICAgaWYgKGlubmVyUGFyZW50Lm5vZGUgPT09IHRoaXMuY29udGFpbmVyUmVmKSB7XG4gICAgICAgIGlubmVyUGFyZW50Lm91dGVyUGFyZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRhdGEtc3RhY2sgKHRoaXMgaXMgb3V0ZXJQYXJlbnQpID4gZGF0YS1zdGFjay10eXBlICh0aGlzIGlzIGlubmVyUGFyZW50KVxuICAgICAgICBjb25zdCBvdXRlclBhcmVudCA9IHRoaXMucGFyZW50c1swXS5jaGlsZHJlbi5maW5kKG91dGVyID0+IHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXIubm9kZS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zdGFjay10eXBlXScpID09PSBwYXJlbnROb2RlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG91dGVyUGFyZW50KSB7XG4gICAgICAgICAgaW5uZXJQYXJlbnQub3V0ZXJQYXJlbnQgPSBvdXRlclBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzaWJsaW5nSW5kZXggPSBpbm5lclBhcmVudC5jaGlsZHJlbi5maW5kSW5kZXgoZWwgPT4gZWwgPT09IG5vZGUpO1xuICAgICAgY29uc3Qgc3RhY2tWaWV3ID0ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBheGlzOiBkaXJlY3Rpb24sXG4gICAgICAgIG5vZGUsIC8vIGZvciBlLnRhcmdldFxuICAgICAgICBpbm5lclBhcmVudCxcbiAgICAgICAgaW5uZXJQYXJlbnRJbmRleCxcbiAgICAgICAgaXNSb290TGV2ZWxTdGFjazogaW5uZXJQYXJlbnQuaXNSb290LFxuICAgICAgICBjaGlsZHJlbjogaW5uZXJQYXJlbnQuY2hpbGRyZW4sXG4gICAgICAgIGlzRmlyc3ROb2RlOiBzaWJsaW5nSW5kZXggPT09IDAsXG4gICAgICAgIGlzTGFzdE5vZGU6IHNpYmxpbmdJbmRleCA9PT0gaW5uZXJQYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMSxcbiAgICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBsZWZ0OiAwXG4gICAgICAgIH0sXG4gICAgICAgIHNpYmxpbmdJbmRleCxcbiAgICAgIH07XG4gICAgICBpbm5lclBhcmVudC5jaGlsZHJlbltzaWJsaW5nSW5kZXhdID0gc3RhY2tWaWV3O1xuXG4gICAgICBjb25zdCBjaGlsZCA9IHdhbGtlci5maXJzdENoaWxkKCk7XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgbm9kZSA9IGNoaWxkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IHdhbGtlci5uZXh0U2libGluZygpO1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh3YWxrZXIucGFyZW50Tm9kZSgpKSB7XG4gICAgICAgICAgICBub2RlID0gd2Fsa2VyLm5leHRTaWJsaW5nKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFzdGFja1ZpZXcuaXNSb290TGV2ZWxTdGFjaykge1xuICAgICAgICBzdGFja1ZpZXcuc3RhY2tJbmRleCA9IGlkeCsrO1xuICAgICAgICBzdGFja1ZpZXcuY2FuTW92ZVRvU2libGluZyA9IHRoaXMuX2Nhbk1vdmVUb1NpYmxpbmcoc3RhY2tWaWV3KTtcbiAgICAgICAgdGhpcy5zdGFja3MucHVzaChzdGFja1ZpZXcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3RhY2tzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uY2FuTW92ZVRvUGFyZW50ID0gdGhpcy5fY2FuTW92ZVRvUGFyZW50KGl0ZW0pO1xuICAgIH0pO1xuICB9XG4gIF9jYW5Nb3ZlVG9QYXJlbnQoc3RhY2spIHtcbiAgICBjb25zdCBheGlzID0gdGhpcy5wYXJlbnRzWzBdLmF4aXM7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMucGFyZW50c1swXS50eXBlO1xuXG4gICAgY29uc3QgeyBjYW5Nb3ZlVG9TaWJsaW5nLCBpbm5lclBhcmVudCwgaW5uZXJQYXJlbnRJbmRleCB9ID0gc3RhY2s7XG4gICAgY29uc3QgeyBvdXRlclBhcmVudCB9ID0gaW5uZXJQYXJlbnQ7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgdXA6ICFjYW5Nb3ZlVG9TaWJsaW5nLnVwICYmIGF4aXMgPT09ICd2ZXJ0aWNhbCcgJiYgIW91dGVyUGFyZW50LmlzTGFzdE5vZGUsXG4gICAgICBkb3duOiAhY2FuTW92ZVRvU2libGluZy5kb3duICYmIGF4aXMgPT09ICd2ZXJ0aWNhbCcgJiYgIW91dGVyUGFyZW50LmlzRmlyc3ROb2RlLFxuICAgICAgbGVmdDogIWNhbk1vdmVUb1NpYmxpbmcubGVmdCAmJiBheGlzID09PSAnaG9yaXpvbnRhbCcgJiYgIW91dGVyUGFyZW50LmlzTGFzdE5vZGUsXG4gICAgICByaWdodDogIWNhbk1vdmVUb1NpYmxpbmcucmlnaHQgJiYgYXhpcyA9PT0gJ2hvcml6b250YWwnICYmICFvdXRlclBhcmVudC5pc0ZpcnN0Tm9kZVxuICAgIH07XG5cbiAgICBpZiAocmVzdWx0LnVwKSB7XG4gICAgICByZXN1bHQudXAgPSB7IFxuICAgICAgICBmcm9tOiBzdGFjay5zdGFja0luZGV4XG4gICAgICB9O1xuICAgICAgaWYgKHR5cGUgPT09ICd5Jykge1xuICAgICAgICByZXN1bHQudXAuZHJhZ2dhYmxlID0gb3V0ZXJQYXJlbnQuaW5uZXJQYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgcmVzdWx0LnVwLmRyYWdnYWJsZSA9IG91dGVyUGFyZW50O1xuICAgICAgfVxuICAgICAgY29uc3QgbmV4dFBhcmVudCA9IHRoaXMucGFyZW50c1tpbm5lclBhcmVudEluZGV4ICsgMV07XG4gICAgICBpZiAobmV4dFBhcmVudC5heGlzID09PSBheGlzKSB7XG4gICAgICAgIHJlc3VsdC51cC50byA9IG5leHRQYXJlbnQuY2hpbGRyZW5bMF0uc3RhY2tJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC51cC5jaGFuZ2VhYmxlVG8gPSBuZXh0UGFyZW50LmNoaWxkcmVuWzBdLnN0YWNrSW5kZXg7XG4gICAgICAgIC8vIOuPhOywqeyngOqwgCDri6Trpbgg7LaV7J24IOqyveyasFxuICAgICAgICAvLyAtIHZlcnRpY2FsIC0+IGhvcml6b250YWxcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sZWZ0KSB7XG4gICAgICByZXN1bHQubGVmdCA9IHsgXG4gICAgICAgIGZyb206IHN0YWNrLnN0YWNrSW5kZXhcbiAgICAgIH07XG4gICAgICBpZiAodHlwZSA9PT0gJ3gnKSB7XG4gICAgICAgIHJlc3VsdC5sZWZ0LmRyYWdnYWJsZSA9IG91dGVyUGFyZW50LmlubmVyUGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICdsZWZ0Jykge1xuICAgICAgICByZXN1bHQubGVmdC5kcmFnZ2FibGUgPSBvdXRlclBhcmVudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRQYXJlbnQgPSB0aGlzLnBhcmVudHNbaW5uZXJQYXJlbnRJbmRleCArIDFdO1xuICAgICAgaWYgKG5leHRQYXJlbnQuYXhpcyA9PT0gYXhpcykge1xuICAgICAgICByZXN1bHQubGVmdC50byA9IG5leHRQYXJlbnQuY2hpbGRyZW5bMF0uc3RhY2tJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOuPhOywqeyngOqwgCDri6Trpbgg7LaV7J24IOqyveyasFxuICAgICAgICAvLyAtIGhvcml6b250YWwgLT4gdmVydGljYWxcbiAgICAgICAgcmVzdWx0LmxlZnQuY2hhbmdlYWJsZVRvID0gbmV4dFBhcmVudC5jaGlsZHJlblswXS5zdGFja0luZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXN1bHQuZG93bikge1xuICAgICAgcmVzdWx0LmRvd24gPSB7IFxuICAgICAgICBmcm9tOiBzdGFjay5zdGFja0luZGV4XG4gICAgICB9O1xuICAgICAgaWYgKHR5cGUgPT09ICd5Jykge1xuICAgICAgICByZXN1bHQuZG93bi5kcmFnZ2FibGUgPSBvdXRlclBhcmVudC5pbm5lclBhcmVudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5leHRQYXJlbnQgPSB0aGlzLnBhcmVudHNbaW5uZXJQYXJlbnRJbmRleCAtIDFdO1xuICAgICAgaWYgKHR5cGUgPT09ICd0b3AnKSB7XG4gICAgICAgIGNvbnN0IGRyYWdnYWJsZSA9IG5leHRQYXJlbnQub3V0ZXJQYXJlbnQ7XG4gICAgICAgIHJlc3VsdC5kb3duLmRyYWdnYWJsZSA9IGRyYWdnYWJsZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXh0UGFyZW50LmF4aXMgPT09IGF4aXMpIHtcbiAgICAgICAgcmVzdWx0LmRvd24udG8gPSBuZXh0UGFyZW50LmNoaWxkcmVuW25leHRQYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV0uc3RhY2tJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIOuPhOywqeyngOqwgCDri6Trpbgg7LaV7J24IOqyveyasFxuICAgICAgICAvLyAtIGhvcml6b250YWwgLT4gdmVydGljYWxcbiAgICAgICAgcmVzdWx0LmRvd24uY2hhbmdlYWJsZVRvID0gbmV4dFBhcmVudC5jaGlsZHJlbltuZXh0UGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdLnN0YWNrSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5yaWdodCkge1xuICAgICAgcmVzdWx0LnJpZ2h0ID0geyBcbiAgICAgICAgZnJvbTogc3RhY2suc3RhY2tJbmRleFxuICAgICAgfTtcbiAgICAgIGlmICh0eXBlID09PSAneCcpIHtcbiAgICAgICAgcmVzdWx0LnJpZ2h0LmRyYWdnYWJsZSA9IG91dGVyUGFyZW50LmlubmVyUGFyZW50O1xuICAgICAgfVxuICAgICAgY29uc3QgbmV4dFBhcmVudCA9IHRoaXMucGFyZW50c1tpbm5lclBhcmVudEluZGV4IC0gMV07XG4gICAgICBpZiAodHlwZSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIGNvbnN0IGRyYWdnYWJsZSA9IG5leHRQYXJlbnQub3V0ZXJQYXJlbnQ7XG4gICAgICAgIHJlc3VsdC5yaWdodC5kcmFnZ2FibGUgPSBkcmFnZ2FibGU7XG4gICAgICB9XG4gICAgICBpZiAobmV4dFBhcmVudC5heGlzID09PSBheGlzKSB7XG4gICAgICAgIHJlc3VsdC5yaWdodC50byA9IG5leHRQYXJlbnQuY2hpbGRyZW5bbmV4dFBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXS5zdGFja0luZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8g64+E7LCp7KeA6rCAIOuLpOuluCDstpXsnbgg6rK97JqwXG4gICAgICAgIC8vIC0gdmVydGljYWwgLT4gaG9yaXpvbnRhbFxuICAgICAgICByZXN1bHQucmlnaHQuY2hhbmdlYWJsZVRvIFxuICAgICAgICAgID0gbmV4dFBhcmVudC5jaGlsZHJlbltuZXh0UGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdLnN0YWNrSW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfY2FuTW92ZVRvU2libGluZyhzdGFjaykge1xuICAgIGNvbnN0IGF4aXMgPSBzdGFjay5pbm5lclBhcmVudC5heGlzO1xuICAgIGNvbnN0IHR5cGUgPSBzdGFjay5pbm5lclBhcmVudC50eXBlO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgIHVwOiBheGlzID09PSAndmVydGljYWwnICYmICFzdGFjay5pc0xhc3ROb2RlLFxuICAgICAgZG93bjogYXhpcyA9PT0gJ3ZlcnRpY2FsJyAmJiAhc3RhY2suaXNGaXJzdE5vZGUsXG4gICAgICBsZWZ0OiBheGlzID09PSAnaG9yaXpvbnRhbCcgJiYgIXN0YWNrLmlzTGFzdE5vZGUsXG4gICAgICByaWdodDogYXhpcyA9PT0gJ2hvcml6b250YWwnICYmICFzdGFjay5pc0ZpcnN0Tm9kZSxcbiAgICB9O1xuICAgIGlmIChyZXN1bHQudXApIHtcbiAgICAgIHJlc3VsdC51cCA9IHsgXG4gICAgICAgIGZyb206IHN0YWNrLnN0YWNrSW5kZXgsIHRvOiBzdGFjay5zdGFja0luZGV4ICsgMVxuICAgICAgfTtcbiAgICAgIGlmICh0eXBlID09PSAneScpIHtcbiAgICAgICAgcmVzdWx0LnVwLmRyYWdnYWJsZSA9IHN0YWNrLmlubmVyUGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICd0b3AnKSB7XG4gICAgICAgIHJlc3VsdC51cC5kcmFnZ2FibGUgPSBzdGFjaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sZWZ0KSB7XG4gICAgICByZXN1bHQubGVmdCA9IHsgZnJvbTogc3RhY2suc3RhY2tJbmRleCwgdG86IHN0YWNrLnN0YWNrSW5kZXggKyAxIH07XG4gICAgICBpZiAodHlwZSA9PT0gJ3gnKSB7XG4gICAgICAgIHJlc3VsdC5sZWZ0LmRyYWdnYWJsZSA9IHN0YWNrLmlubmVyUGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgPT09ICdsZWZ0Jykge1xuICAgICAgICByZXN1bHQubGVmdC5kcmFnZ2FibGUgPSBzdGFjaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVzdWx0LmRvd24pIHtcbiAgICAgIHJlc3VsdC5kb3duID0geyBmcm9tOiBzdGFjay5zdGFja0luZGV4LCB0bzogc3RhY2suc3RhY2tJbmRleCAtIDEgfTtcbiAgICAgIGlmICh0eXBlID09PSAneScpIHtcbiAgICAgICAgcmVzdWx0LmRvd24uZHJhZ2dhYmxlID0gc3RhY2suaW5uZXJQYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ3RvcCcpIHtcbiAgICAgICAgcmVzdWx0LmRvd24uZHJhZ2dhYmxlID0gdGhpcy5zdGFja3Nbc3RhY2suc3RhY2tJbmRleCAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzdWx0LnJpZ2h0KSB7XG4gICAgICByZXN1bHQucmlnaHQgPSB7IGZyb206IHN0YWNrLnN0YWNrSW5kZXgsIHRvOiBzdGFjay5zdGFja0luZGV4IC0gMSB9O1xuICAgICAgaWYgKHR5cGUgPT09ICd4Jykge1xuICAgICAgICByZXN1bHQucmlnaHQuZHJhZ2dhYmxlID0gc3RhY2suaW5uZXJQYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHJlc3VsdC5yaWdodC5kcmFnZ2FibGUgPSB0aGlzLnN0YWNrc1tzdGFjay5zdGFja0luZGV4IC0gMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiBcbiAgZGVidWcoKSB7XG4gICAgdGhpcy5zdGFja3MuZm9yRWFjaChlbCA9PiB7XG4gICAgICBjb25zdCBjb2xvciA9IEZ1bGxwYWdlU3dpcGVyLmdldFJhbmRvbUNvbG9yKCk7XG4gICAgICBlbC5ub2RlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coJ1NUQUNLX1BBUkVOVFM6ICcsIHRoaXMucGFyZW50cyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnU1RBQ0tfVklFVzogJywgdGhpcy5zdGFja3MpO1xuICAgIHdpbmRvdy5mcHMgPSB0aGlzO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/index.js\n");

/***/ })

})