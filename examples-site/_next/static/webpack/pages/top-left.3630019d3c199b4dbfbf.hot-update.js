webpackHotUpdate_N_E("pages/top-left",{

/***/ "../src/index.js":
/*!***********************!*\
  !*** ../src/index.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FullpageSwiper; });\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! hammerjs */ \"../node_modules/hammerjs/hammer.js\");\n/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ \"../node_modules/gsap/index.js\");\n\n\n\nclass FullpageSwiper {\n  static getViewport() {\n    return {\n      // webview issue - undefined : window.innerWidth, window.innerHeight\n      clientWidth: window.innerWidth || document.documentElement.clientWidth,\n      clientHeight: window.innerHeight || document.documentElement.clientHeight\n    };\n  }\n  static getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  constructor(selector, options = {}) {\n    this.containerRef = document.querySelector(selector);\n    this.containerType = this.containerRef.getAttribute('data-stack-type');\n    if (!(this.containerRef && this.containerType)) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'fullpage-swiper initialization error, check selector',\n        selector\n      );\n      return;\n    }\n    if (!hammerjs__WEBPACK_IMPORTED_MODULE_0___default.a || !gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '\"Hammer\" and \"gsap\" peerDependencies are required'\n      );\n      return;\n    }\n    this.dep = { Hammer: (hammerjs__WEBPACK_IMPORTED_MODULE_0___default()), gsap: gsap__WEBPACK_IMPORTED_MODULE_1__[\"default\"] };\n    this.containerAxis =\n      this.containerType === 'top' || this.containerType === 'y'\n        ? 'vertical'\n        : 'horizontal';\n\n    this.options = Object.assign({ debug: false }, options);\n\n    this.parents = [];\n    this.stacks = [];\n    this.hammers = [];\n\n    this.currentIdx = 0;\n    this.eventAxis = '';\n    this.eventDirection = '';\n    this.dragging = false;\n    this.draggingRef = null;\n\n    this.viewport = FullpageSwiper.getViewport();\n\n    this.setParents();\n    this.setStacks();\n    this.setCommonLayout();\n    this.setLayout();\n\n    // const config = this.options.parentsConfig[parent.id] || {}\n    this._addEvents();\n\n    this.options.debug && this.debug();\n  }\n  removeListeners() {}\n  _blockEvent(eventAxis) {\n    // 최초 이벤트 요청일 경우 블록 X\n    if (this.eventAxis === '') {\n      this.eventAxis = eventAxis;\n      return false;\n    }\n    // 1.드래깅중이 아닐 경우 이벤트 블록\n    // 2. 진행중인 드래깅이 존재하는 경우, 요청 이벤트 타입이 동일하지 않으면 블록\n    if (!this.isDragging || this.eventAxis !== eventAxis) {\n      // console.log('blocked event', eventType);\n      return true;\n    }\n\n    // 동일한 axis의 드래깅중인 경우 업데이트\n    this.eventAxis = eventAxis;\n  }\n  _resetDrag() {\n    this.dragging = false;\n    this.eventAxis = '';\n    this.eventDirection = '';\n    this.draggingRef = null;\n    this.stackMoveFromTo = {};\n  }\n  _getDraggingInfo(eventTarget) {\n    console.log('this.eventDirection', this.eventDirection, eventTarget);\n    if (eventTarget) {\n      // obj { from, to, draggable }\n      let obj = eventTarget.canMoveToSibling[this.eventDirection];\n      if (!obj) {\n        obj = eventTarget.canMoveToParent[this.eventDirection];\n      }\n      return obj; \n    }\n    return {};\n  }\n  _panstart(e) {\n    this.isDragging = true;\n    this.eventTarget = this.stacks.find(\n      stack => stack.node === e.currentTarget\n    );\n    if (!this.eventTarget) {\n      this.isDragging = false;\n      return;\n    }\n    this.options.dragStart(this);\n  }\n  _panleft(e) {\n    const eventAxis = 'horizontal';\n    if (this._blockEvent(eventAxis)) return;\n    if (this.eventDirection && this.eventDirection !== 'right') {\n      this.eventChanged = true;\n    }\n    this.eventDirection = 'left';\n    // console.log('START:', eventType.direction);\n    \n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _panright(e) {\n    const eventAxis = 'horizontal';\n    if (this._blockEvent(eventAxis)) return;\n    if (this.eventDirection && this.eventDirection !== 'right') {\n      this.eventChanged = true;\n    }\n    this.eventDirection = 'right';\n    // console.log('START:', eventType.direction);\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _pandown(e) {\n    const eventAxis = 'vertical';\n    if (this._blockEvent(eventAxis)) return;\n    if (this.eventDirection && this.eventDirection !== 'down') {\n      this.eventChanged = true;\n    }\n    this.eventDirection = 'down';\n    // console.log('START:', eventType.direction, this.draggingRef);\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  \n  _panup(e) {\n    const eventAxis = 'vertical';\n    if (this._blockEvent(eventAxis)) return;\n    if (this.eventDirection && this.eventDirection !== 'up') {\n      this.eventChanged = true;\n    }\n    this.eventDirection = 'up';\n    // console.log('from to', data.from, data.to);\n\n    if (!this.draggingRef) {\n      this.draggingInfo = this._getDraggingInfo(this.eventTarget);\n      this.draggingRef = this.draggingInfo.draggable;\n    }\n\n    if (!this.draggingRef) {\n      this._resetDrag();\n    } else {\n      this._dragging(e);\n    }\n  }\n  _endCallback() {\n    const { stackMoveFromTo } = this;\n    console.log('stackMoveFromTo', stackMoveFromTo);\n    // console.log('stackMoveFromTo', stackMoveFromTo);\n    if (stackMoveFromTo.from !== stackMoveFromTo.to) {\n      if (stackMoveFromTo.toParent) {\n        stackMoveFromTo.toParent.lastSeenIndex = stackMoveFromTo.to;\n      }\n      // let updateTo = stackMoveFromTo.to;\n      // if (stackMoveFromTo.toParent) {\n      //   if (updateTo >= 0) {\n      //     stackMoveFromTo.toParent.lastSeenIndex = updateTo;\n      //   } else {\n      //     // Restore\n      //     stackMoveFromTo.toParent.lastSeenIndex = this.currentIdx;\n      //     stackMoveFromTo.to = this.currentIdx;\n      //   }\n      // }\n      // this.currentIdx = stackMoveFromTo.to;\n    }\n    this.currentIdx = stackMoveFromTo.to;\n    this.options.dragEnd(this);\n    this._resetDrag();\n  }\n  _panend() {\n    // console.log('START: panend', this.eventType, !!this.draggingRef);\n    if (this.draggingRef) {\n      // gsap 콜백내에서 this.draggingRef 의 값이 null 이 될 가능성이 존재하므로\n      // 드래깅되는 객체의 주소지를 변수로 저장해서 사용\n      const draggingRef = this.draggingRef;\n      const direction = this.eventDirection;\n      const { type } = draggingRef;\n      const { clientHeight, clientWidth } = this.viewport;\n      const t = this.dep.gsap.timeline();\n\n      if (type === 'top') {\n        if (direction === 'up') {\n          if (draggingRef.positions.top !== 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { top: -clientHeight }).add(() => {\n            draggingRef.positions.top = -clientHeight;\n            this._endCallback();\n          });\n        }\n        if (direction === 'down') {\n          if (draggingRef.positions.top === 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { top: 0 }).add(() => {\n            draggingRef.positions.top = 0;\n            this._endCallback();\n          });\n        }\n      }\n      if (type === 'left') {\n        if (direction === 'left') {\n          if (draggingRef.positions.left !== 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n\n          t.to(draggingRef.node, { left: -clientWidth }).add(() => {\n            draggingRef.positions.left = -clientWidth;\n            this._endCallback();\n          });\n        }\n        if (direction === 'right') {\n          if (draggingRef.positions.left === 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { left: 0 }).add(() => {\n            draggingRef.positions.left = 0;\n            this._endCallback();\n          });\n        }\n      }\n\n      if (type === 'y') {\n        const gap = draggingRef.positions.y - this.snapshotPositions.y;\n        const y = draggingRef.positions.y;\n        if (direction === 'up') {\n          const canNext = this.snapshotPositions.y < y;\n          let move = y;\n          if (canNext) {\n            move = y - clientHeight;\n            const max = -clientHeight * (draggingRef.children.length - 1);\n            if (move < max) move = max;\n          }\n\n          if (gap < 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n\n          t.to(draggingRef.node, { y: move }).add(() => {\n            draggingRef.positions.y = move;\n            this._endCallback();\n          });\n        }\n        if (direction === 'down') {\n          const canNext = this.snapshotPositions.y > y;\n          let move = y;\n          if (canNext) {\n            move = y + clientHeight;\n            if (move >= 0) move = 0;\n          }\n          if (gap > 0) {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { y: move }).add(() => {\n            draggingRef.positions.y = move;\n            this._endCallback();\n          });\n        }\n      }\n\n      if (type === 'x') {\n        const x = draggingRef.positions.x;\n        if (direction === 'left') {\n          const canNext = this.snapshotPositions.x < x;\n\n          let move = x;\n          if (canNext) {\n            move = x - clientWidth;\n            const max = -clientWidth * (draggingRef.children.length - 1);\n            if (move < max) move = max;\n          } else {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { x: move }).add(() => {\n            draggingRef.positions.x = move;\n            this._endCallback();\n          });\n        }\n        if (direction === 'right') {\n          const canNext = this.snapshotPositions.x > x;\n          let move = x;\n          if (canNext) {\n            move = x + clientWidth;\n            if (move >= 0) move = 0;\n          } else {\n            this.stackMoveFromTo.to = this.stackMoveFromTo.from;\n          }\n          t.to(draggingRef.node, { x: move }).add(() => {\n            draggingRef.positions.x = move;\n            this._endCallback();\n          });\n        }\n      }\n    } else {\n      this._resetDrag();\n    }\n  }\n  // this.distance 값에 따라 드래그 가동범위 셋팅 가능하도록\n  // Math.abs(e.deltaY), Math.abs(e.deltaX)\n  _dragging(e) {\n    const target = this.draggingRef;\n    const { type } = target;\n    const { clientHeight, clientWidth } = this.viewport;\n\n    this.snapshotPositions = {\n      top: 0,\n      left: 0,\n      x: 0,\n      y: 0\n    };\n    const positions = this.snapshotPositions;\n    let posY, posX;\n    const stackView = this.eventTarget;\n\n\n    if (type === 'y') {\n      posY = e.deltaY + target.positions.y;\n\n\n      if (posY >= 0) {\n        target.positions.y = 0;\n        target.node.style.transform = 'translate3d(0px, 0px, 0px)';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      } else {\n        const max = -clientHeight * (target.children.length - 1);\n        if (posY <= max) {\n          target.positions.y = max;\n          target.node.style.transform = `translate3d(0px, ${max}px, 0px)`;\n          // change dragging target\n          // this.draggingInfo = this._getDraggingInfo(stackView);\n          // this.draggingRef = this.draggingInfo.draggable;\n          return;\n        }\n      }\n\n      // 실제 그려짐\n      positions.y = posY;\n      this.dep.gsap.set(target.node, { y: posY });\n    }\n    if (type === 'x') {\n      posX = e.deltaX + target.positions.x;\n      if (posX >= 0) {\n        target.positions.x = 0;\n        target.node.style.transform = 'translate3d(0px, 0px, 0px)';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      const max = -clientWidth * (target.children.length - 1);\n      if (posX <= max) {\n        target.positions.x = max;\n        target.node.style.transform = `translate3d(${max}px, 0px, 0px)`;\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      positions.x = posX;\n      this.dep.gsap.set(target.node, { x: posX });\n    }\n    if (type === 'top') {\n      posY = e.deltaY + target.positions.top;\n      if (posY >= 0) {\n        target.positions.top = 0;\n        target.node.style.top = 0 + 'px';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      if (posY <= -clientHeight) {\n        target.positions.top = -clientHeight;\n        target.node.style.top = -clientHeight + 'px';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n\n      positions.top = posY;\n      this.dep.gsap.set(target.node, { top: posY });\n    }\n\n    if (type === 'left') {\n      posX = target.positions.left + e.deltaX;\n      if (posX >= 0) {\n        target.positions.left = 0;\n        target.node.style.left = 0 + 'px';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n      if (posX <= -clientWidth) {\n        target.positions.left = -clientWidth;\n        target.node.style.left = -clientWidth + 'px';\n        // change dragging target\n        // this.draggingInfo = this._getDraggingInfo(stackView);\n        // this.draggingRef = this.draggingInfo.draggable;\n        return;\n      }\n\n      positions.left = posX;\n      this.dep.gsap.set(target.node, { left: posX });\n    }\n\n    console.log('_dragging', type, this.eventDirection, posY, this.eventTarget, this.draggingInfo);\n\n    this.stackMoveFromTo = this._getStackMoveFromTo();\n    // console.log('dragging stackMoveFromTo', this.stackMoveFromTo);\n\n    this.options.dragMove(this);\n    // top 의 경우시\n    // siblingIndex 0, posY 0, -1, -2, ... -> end Event 시 -667\n    // siblingIndex 0 값은 점점 hide, sliblingindex 1값은 하단 부터 점점 노출\n  }\n  _getStackMoveFromTo() {\n    const { from, to, changeableTo } = this.draggingInfo;\n    const result = {\n      from,\n    };\n    if (to !== undefined) {\n      const toParent = this.stacks[to].innerParent;\n      result.to = to;\n      result.toParent = toParent;\n    } else if (changeableTo !== undefined) {\n      const toParent = this.stacks[changeableTo].innerParent;\n      result.to = toParent.lastSeenIndex ? toParent.lastSeenIndex : changeableTo;\n      result.toParent = toParent;\n    }\n    // console.log('from', from, to, changeableTo, result);\n\n    return result;\n  }\n\n  _addEvents() {\n    // mobile 일 경우\n    // touchstart, touchmove, touchend 3가지 등록\n\n    // pc 일 경우\n    // DOMMouseScroll mousewheel\n    // mousedown, mousemove, mouseup\n    // keydown\n\n    // resizeComplete 시 currentIdx 로 이동\n\n    const mc = new this.dep.Hammer(this.containerRef);\n    // save mc instance for remove event listeners - mc.off();\n    this.hammers.push(mc);\n    mc.add(\n      new this.dep.Hammer.Pan({\n        direction: this.dep.Hammer.DIRECTION_ALL,\n        threshold: this.options.threshold\n      })\n    );\n    // console.log(2);\n\n    // Hammer pan event issue : not support event.currentTarget\n    this.stacks.forEach(({ node }) => {\n      node.addEventListener('touchstart', this._panstart.bind(this), false);\n    });\n\n    mc.on('panend', this._panend.bind(this));\n    mc.on('panleft', this._panleft.bind(this));\n    mc.on('panright', this._panright.bind(this));\n    mc.on('pandown', this._pandown.bind(this));\n    mc.on('panup', this._panup.bind(this));\n  }\n  setCommonLayout() {\n    // Block x,y scrolling\n    // Required in Samsung Internet browser\n    document.documentElement.style.overflow = 'hidden';\n    document.documentElement.style.height = '100%';\n    document.documentElement.style.width = '100%';\n\n    document.body.style.overflow = 'hidden';\n    document.body.style.height = '100%';\n    document.body.style.width = '100%';\n  }\n  setLayout() {\n    this.viewport = FullpageSwiper.getViewport();\n    // 부모 컨테이너 layout\n    this.parents.forEach(parent => {\n      // data-stack-type 에 따라 layout setting\n      // x, y, top, left\n      switch (parent.type) {\n      case 'x':\n        this._layoutX(parent);\n        return;\n      case 'y':\n        this._layoutY(parent);\n        return;\n      case 'top':\n      case 'left':\n        this._layoutFixed(parent);\n        return;\n      }\n    });\n  }\n  _layoutX(parent) {\n    const { clientHeight, clientWidth } = this.viewport;\n    const { node, children } = parent;\n    node.x = node.y = 0;\n    node.style.display = 'flex';\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.width = clientWidth * children.length + 'px';\n    node.style.transform = 'translate3d(0px, 0px, 0px)';\n    children.forEach(({ node }) => {\n      node.style.width = clientWidth + 'px';\n      node.style.height = clientHeight + 'px';\n    });\n  }\n  _layoutY(parent) {\n    const { clientHeight } = this.viewport;\n    const { node, children } = parent;\n    node.x = node.y = 0;\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.height = clientHeight * children.length + 'px';\n    node.style.transform = 'translate3d(0px, 0px, 0px)';\n    children.forEach(({ node }) => {\n      node.style.height = clientHeight + 'px';\n    });\n  }\n  _layoutFixed(parent) {\n    const { clientHeight, clientWidth } = this.viewport;\n    const { node, children } = parent;\n    node.style.overflow = 'hidden';\n    node.style.position = 'relative';\n    node.style.height = clientHeight + 'px';\n    node.style.width = clientWidth + 'px';\n\n    children.forEach(({ node }, idx, arr) => {\n      node.style.position = 'absolute';\n      node.style.top = 0;\n      node.style.left = 0;\n      node.style.height = clientHeight + 'px';\n      node.style.width = clientWidth + 'px';\n      node.style.zIndex = (arr.length - idx) * 10;\n    });\n  }\n  setParents() {\n    this.parents = Array.from(\n      document.querySelectorAll('[data-stack-type]')\n    ).map(parent => {\n      const type = parent.getAttribute('data-stack-type');\n      const axis =\n        type === 'top' || type === 'y' ? 'vertical' : 'horizontal';\n\n      let children = [];\n      // if parent is root parent\n      if (parent === this.containerRef) {\n        children = Array\n          .from(parent.children)\n          .filter(el => typeof el.getAttribute('data-stack') === 'string');\n      } else {\n        children = Array\n          .from(parent.querySelectorAll('[data-stack]'))\n          .filter(el => typeof el.getAttribute('data-stack') === 'string');\n      }\n\n      return {\n        type,\n        axis,\n        node: parent,\n        isRoot: parent === this.containerRef,\n        children,\n        positions: {\n          x: 0,\n          y: 0,\n          top: 0,\n          left: 0\n        }\n      };\n    });\n  }\n  setStacks() {\n    // filter function - only [data-stack] element\n    const filter = node => {\n      const isStack =\n        node && typeof node.getAttribute('data-stack') === 'string';\n      \n      const result = isStack\n        ? NodeFilter.FILTER_ACCEPT\n        : NodeFilter.FILTER_SKIP;\n     \n      return result;\n    };\n    \n    const walker = document.createTreeWalker(\n      this.containerRef,\n      NodeFilter.SHOW_ELEMENT,\n      filter,\n      false\n    );\n\n    // node is [data-stack] element\n    let node = walker.firstChild();\n    let idx = 0;\n    while (node !== null) {\n      let parentNode = node.parentNode;\n      let type;\n      while (parentNode !== null) {\n        type = parentNode.getAttribute('data-stack-type');\n        if (type) {\n          break;\n        } else {\n          parentNode = parentNode.parentNode;\n        }\n      }\n\n      const isVertical = type === 'top' || type === 'y';\n      const direction = isVertical ? 'vertical' : 'horizontal';\n      const innerParentIndex = this.parents.findIndex(p => p.node === parentNode);\n      const innerParent = this.parents[innerParentIndex];\n\n      if (innerParent.node === this.containerRef) {\n        innerParent.outerParent = null;\n      } else {\n        // data-stack (this is outerParent) > data-stack-type (this is innerParent)\n        const outerParent = this.parents[0].children.find(outer => {\n          return outer.node.querySelector('[data-stack-type]') === parentNode;\n        });\n        if (outerParent) {\n          innerParent.outerParent = outerParent;\n        }\n      }\n\n      const siblingIndex = innerParent.children.findIndex(el => el === node);\n      const stackView = {\n        type,\n        axis: direction,\n        node, // for e.target\n        innerParent,\n        innerParentIndex,\n        isRootLevelStack: innerParent.isRoot,\n        children: innerParent.children,\n        isFirstNode: siblingIndex === 0,\n        isLastNode: siblingIndex === innerParent.children.length - 1,\n        positions: {\n          x: 0,\n          y: 0,\n          top: 0,\n          left: 0\n        },\n        siblingIndex,\n      };\n      innerParent.children[siblingIndex] = stackView;\n\n      const child = walker.firstChild();\n      if (child) {\n        node = child;\n      } else {\n        const next = walker.nextSibling();\n        if (next) {\n          node = next;\n        } else {\n          if (walker.parentNode()) {\n            node = walker.nextSibling();\n          } else {\n            node = null;\n          }\n        }\n      }\n      if (!stackView.isRootLevelStack) {\n        stackView.stackIndex = idx++;\n        stackView.canMoveToSibling = this._canMoveToSibling(stackView);\n        this.stacks.push(stackView);\n      }\n    }\n\n    this.stacks.forEach((item) => {\n      item.canMoveToParent = this._canMoveToParent(item);\n    });\n  }\n  _canMoveToParent(stack) {\n    const axis = this.parents[0].axis;\n    const type = this.parents[0].type;\n\n    const { canMoveToSibling, innerParent, innerParentIndex } = stack;\n    const { outerParent } = innerParent;\n    const result = {\n      up: !canMoveToSibling.up && axis === 'vertical' && !outerParent.isLastNode,\n      down: !canMoveToSibling.down && axis === 'vertical' && !outerParent.isFirstNode,\n      left: !canMoveToSibling.left && axis === 'horizontal' && !outerParent.isLastNode,\n      right: !canMoveToSibling.right && axis === 'horizontal' && !outerParent.isFirstNode\n    };\n\n    if (result.up) {\n      result.up = { \n        from: stack.stackIndex\n      };\n      if (type === 'y') {\n        result.up.draggable = outerParent.innerParent;\n      }\n      if (type === 'top') {\n        result.up.draggable = outerParent;\n      }\n      const nextParent = this.parents[innerParentIndex + 1];\n      if (nextParent.axis === axis) {\n        result.up.to = nextParent.children[0].stackIndex;\n      } else {\n        result.up.changeableTo = nextParent.children[0].stackIndex;\n        // 도착지가 다른 축인 경우\n        // - vertical -> horizontal\n      }\n    }\n    if (result.left) {\n      result.left = { \n        from: stack.stackIndex\n      };\n      if (type === 'x') {\n        result.left.draggable = outerParent.innerParent;\n      }\n      if (type === 'left') {\n        result.left.draggable = outerParent;\n      }\n      const nextParent = this.parents[innerParentIndex + 1];\n      if (nextParent.axis === axis) {\n        result.left.to = nextParent.children[0].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - horizontal -> vertical\n        result.left.changeableTo = nextParent.children[0].stackIndex;\n      }\n    }\n\n    if (result.down) {\n      result.down = { \n        from: stack.stackIndex\n      };\n      if (type === 'y') {\n        result.down.draggable = outerParent.innerParent;\n      }\n      const nextParent = this.parents[innerParentIndex - 1];\n      if (type === 'top') {\n        const draggable = nextParent.outerParent;\n        result.down.draggable = draggable;\n      }\n      if (nextParent.axis === axis) {\n        result.down.to = nextParent.children[nextParent.children.length - 1].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - horizontal -> vertical\n        result.down.changeableTo = nextParent.children[nextParent.children.length - 1].stackIndex;\n      }\n    }\n\n    if (result.right) {\n      result.right = { \n        from: stack.stackIndex\n      };\n      if (type === 'x') {\n        result.right.draggable = outerParent.innerParent;\n      }\n      const nextParent = this.parents[innerParentIndex - 1];\n      if (type === 'left') {\n        const draggable = nextParent.outerParent;\n        result.right.draggable = draggable;\n      }\n      if (nextParent.axis === axis) {\n        result.right.to = nextParent.children[nextParent.children.length - 1].stackIndex;\n      } else {\n        // 도착지가 다른 축인 경우\n        // - vertical -> horizontal\n        result.right.changeableTo = nextParent.children[nextParent.children.length - 1].stackIndex;\n      }\n    }\n\n    return result;\n  }\n  _canMoveToSibling(stack) {\n    const axis = stack.innerParent.axis;\n    const type = stack.innerParent.type;\n    const result = {\n      up: axis === 'vertical' && !stack.isLastNode,\n      down: axis === 'vertical' && !stack.isFirstNode,\n      left: axis === 'horizontal' && !stack.isLastNode,\n      right: axis === 'horizontal' && !stack.isFirstNode,\n    };\n    if (result.up) {\n      result.up = { \n        from: stack.stackIndex, to: stack.stackIndex + 1\n      };\n      if (type === 'y') {\n        result.up.draggable = stack.innerParent;\n      }\n      if (type === 'top') {\n        result.up.draggable = stack;\n      }\n    }\n    if (result.left) {\n      result.left = { from: stack.stackIndex, to: stack.stackIndex + 1 };\n      if (type === 'x') {\n        result.left.draggable = stack.innerParent;\n      }\n      if (type === 'left') {\n        result.left.draggable = stack;\n      }\n    }\n\n    if (result.down) {\n      result.down = { from: stack.stackIndex, to: stack.stackIndex - 1 };\n      if (type === 'y') {\n        result.down.draggable = stack.innerParent;\n      }\n      if (type === 'top') {\n        result.down.draggable = this.stacks[stack.stackIndex - 1];\n      }\n    }\n    if (result.right) {\n      result.right = { from: stack.stackIndex, to: stack.stackIndex - 1 };\n      if (type === 'x') {\n        result.right.draggable = stack.innerParent;\n      }\n      if (type === 'left') {\n        result.right.draggable = this.stacks[stack.stackIndex - 1];\n      }\n    }\n    return result;\n  }\n \n  debug() {\n    this.stacks.forEach(el => {\n      const color = FullpageSwiper.getRandomColor();\n      el.node.style.backgroundColor = color;\n    });\n    // eslint-disable-next-line no-console\n    console.log('STACK_PARENTS: ', this.parents);\n    // eslint-disable-next-line no-console\n    console.log('STACK_VIEW: ', this.stacks);\n    window.fps = this;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/index.js\n");

/***/ })

})